/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var obsidian = require("obsidian");
var CronievBookkeeping = class extends obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      return __awaiter(this, void 0, void 0, function* () {
        console.log("Loading plugin CronievBookkeeping...");
        yield this.loadSettings();
        this.addSettingTab(new CronievBookkeepingSettingsTab(this.app, this));
        yield this.saveSettings();
        this.addCommand({
          id: "update-ledger",
          name: "Update Ledger",
          callback: () => {
            this.updateLedger();
          },
          hotkeys: [
            {
              modifiers: ["Ctrl"],
              key: "L"
            }
          ]
        });
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      console.log("Croniev Bookkeeping: Compiling file " + this.settings.transaction_file + " into file " + this.settings.ledger_file);
      let doc_ledger = this.app.vault.getAbstractFileByPath(this.settings.ledger_file);
      var str_transactions;
      try {
        str_transactions = yield this.app.vault.read(this.app.vault.getAbstractFileByPath(this.settings.transaction_file));
        this.app.vault.modify(doc_ledger, "Processing...");
      } catch (e) {
        if (e instanceof TypeError) {
          throw new LedgerError("Your transaction and/or ledger file does not exist");
        }
      }
      try {
        checkSettings(this.settings.bucket_names, this.settings.piechart_buckets);
        let months_map = makeMonthsMap(str_transactions.split("\n"));
        let new_doc = "";
        let buckets_list = Object.keys(this.settings.table_sums);
        let table_head = makeTableHead(buckets_list, this.settings.bucket_names);
        let empty_row = makeEmptyTableRow(buckets_list.length);
        let sorted_buckets = /* @__PURE__ */ new Map();
        Object.entries(this.settings.bucket_names).forEach(function([k, v]) {
          sorted_buckets.set(k, []);
        });
        months_map.forEach((arr, mon) => {
          let sorted_buckets_mon = new Map(JSON.parse(JSON.stringify(Array.from(sorted_buckets))));
          sortTransactions(sorted_buckets_mon, arr);
          let buckets_sums = sumBuckets(sorted_buckets_mon);
          let sum_entries = makeSumEntries(buckets_sums, this.settings.table_sums);
          new_doc += mon + "\n" + table_head;
          if (this.settings.include_transactions) {
            new_doc += makeTableFromMap(buckets_list, stringifyAndReverseTransactionMap(sorted_buckets_mon));
            new_doc += empty_row;
          }
          new_doc += makeTableFromMap(buckets_list, sum_entries);
          if (this.settings.include_piechart) {
            new_doc += makePiechartFromMap(this.settings.piechart_buckets, buckets_sums, this.settings.bucket_names);
          }
        });
        this.app.vault.modify(doc_ledger, new_doc);
      } catch (e) {
        if (e instanceof LedgerError) {
          this.app.vault.modify(doc_ledger, e.message);
        } else {
          throw e;
        }
      }
    });
  }
};
function checkSettings(buckets, piechart) {
  for (var k of Object.keys(buckets)) {
    if (k.length > 1) {
      throw new LedgerError("Bucket classifiers should only be 1 character long: `" + k + "`\nPlease check your 'Buckets' Settings");
    }
  }
  for (var k of piechart) {
    if (Object.keys(buckets).indexOf(k) == -1) {
      throw new LedgerError("You are trying to piechart an undeclared bucket: `" + k + "`\nPlease check your 'Buckets to display in piechart' Settings");
    }
  }
}
function makeMonthsMap(arr_transactions) {
  let months_map = /* @__PURE__ */ new Map();
  let month;
  for (const line of arr_transactions) {
    if (line == "\n" || line == "") {
      continue;
    }
    if (line.indexOf("#") != -1) {
      month = line;
      let arr = [];
      months_map.set(month, arr);
    } else {
      let arr = months_map.get(month);
      arr.push(line);
    }
  }
  return months_map;
}
function makeTableHead(buckets, bucket_names) {
  let table_head = "|";
  let table_head2 = "|";
  for (const b of buckets) {
    table_head += bucket_names[b] + "|";
    table_head2 += " --- |";
  }
  return table_head + "\n" + table_head2 + "\n";
}
function sortTransactions(map, arr) {
  for (const t of arr) {
    let split2 = makeTransaction(t);
    if (!map.has(split2[0])) {
      throw new LedgerError("Undefined Bucket used: (" + t + ")");
    }
    map.get(split2[0]).push(split2.slice(1));
  }
}
function makeTransaction(t, buckets) {
  let split2 = t.split(" ");
  if (split2[0] == "" || split2[1] == "") {
    throw new LedgerError("Too many spaces before bucket or amount: (" + t + ")");
  }
  let desc = split2.slice(2).join(" ");
  if (isNaN(split2[1])) {
    throw new LedgerError("Amount is not a number: (" + t + ")");
  }
  return [split2[0], split2[1], desc];
}
function sumBuckets(map) {
  let sums = /* @__PURE__ */ new Map();
  map.forEach((ts, b) => {
    let sum = 0;
    for (const t of ts) {
      sum += parseFloat(t);
    }
    sums.set(b, sum.toFixed(2));
  });
  return sums;
}
function makeSumEntries(sums, table_sums) {
  let sum_entries = /* @__PURE__ */ new Map();
  Object.entries(table_sums).forEach(function([k, v]) {
    if (!sums.has(k)) {
      throw new LedgerError("You want to display an undeclared bucket in the table: `" + k + "`\nPlease check your 'Sums Shown in Table' Settings");
    }
    sum_entries.set(k, []);
    let combinations = v.split(",");
    for (var s of combinations) {
      let vorzeichen = 1;
      let tmp = 0;
      let strVz = s[0];
      for (const c of s.slice(1)) {
        if (c == "+") {
          vorzeichen = 1;
        } else if (c == "-") {
          vorzeichen = -1;
        } else {
          if (!sums.has(c)) {
            throw new LedgerError("You are trying to calculate with an undeclared bucket: `" + c + "` in `" + k + ": " + s + "`\nPlease check your 'Sums Shown in Table' Settings");
          }
          tmp += vorzeichen * parseFloat(sums.get(c));
        }
      }
      switch (strVz) {
        case "+":
          if (tmp < 0) {
            strVz = "";
          }
          break;
        case "-":
          if (tmp < 0) {
            strVz = "+";
          } else {
            strVz = "";
          }
          tmp *= -1;
          break;
        case "0":
          strVz = "";
          break;
      }
      sum_entries.get(k).push(strVz + tmp.toFixed(2));
    }
  });
  return sum_entries;
}
function makeEmptyTableRow(lena) {
  let row = "|";
  for (let i = 0; i < lena; i++) {
    row += " |";
  }
  return row + "\n";
}
function stringifyAndReverseTransactionMap(map) {
  let new_map = /* @__PURE__ */ new Map();
  map.forEach((v, k) => {
    let list = [];
    for (const element of v) {
      list.push(element.join(" "));
    }
    new_map.set(k, list.reverse());
  });
  return new_map;
}
function makeTableFromMap(buckets, map) {
  let exhausted = [];
  let table = "";
  let row = 0;
  buckets.forEach((element) => {
    exhausted.push(0);
  });
  while (exhausted.includes(0)) {
    table += "|";
    for (let i = 0; i < buckets.length; i++) {
      if (exhausted[i] == 0) {
        let map_el = map.get(buckets[i]);
        if (map_el[row] != void 0) {
          table += map_el[row];
        }
        if (map_el.length <= row + 1) {
          exhausted[i] = 1;
        }
      }
      table += " |";
    }
    table += "\n";
    row++;
  }
  return table;
}
function makePiechartFromMap(buckets, map, names) {
  result = ">[!info]- Piechart\n> ```mermaid\n> pie\n";
  for (const b of buckets) {
    result += '> "' + names[b] + '":' + map.get(b) + "\n";
  }
  result += "> ```\n\n";
  return result;
}
function bucketsToDict(bucketsInput) {
  let buckets = bucketsInput.split("\n");
  let dict = {};
  for (const b of buckets) {
    if (b != "") {
      split = b.split(": ");
      dict[split[0]] = split[1];
    }
  }
  return dict;
}
function dictToBuckets(dict) {
  out = "";
  Object.entries(dict).forEach(function([k, v]) {
    out += k + ": " + v + "\n";
  });
  return out;
}
var LedgerError = class extends Error {
  constructor(message) {
    super(message);
  }
};
var DEFAULT_SETTINGS = {
  transaction_file: "_transactions.md",
  ledger_file: "_ledger.md",
  bucket_names: { "s": "Savings", "i": "Income", "r": "Recurring", "e": "Errands", "x": "Else", "f": "Freetime", "g": "Groceries" },
  table_sums: { "g": "-g", "f": "-f", "e": "-e,-g+f+e", "x": "-x,-g+f+e+x", "r": "-r,-g+f+e+x+r", "i": "+i,+i-g-f-e-x-r,0s+i-g-f-e-x-r" },
  include_transactions: true,
  include_piechart: false,
  piechart_buckets: ["g", "f", "e", "x", "r"]
};
var CronievBookkeepingSettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Bookkeeping - Settings" });
    new obsidian.Setting(containerEl).setName("Transactions File").setDesc("Type the path to the file you want to add the transactions to").addTextArea((text) => text.setPlaceholder("_transactions.md").setValue(this.plugin.settings.transaction_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_transactions.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Ledger File").setDesc("Type the path to the file you want the ledger to be added to").addTextArea((text) => text.setPlaceholder("_ledger.md").setValue(this.plugin.settings.ledger_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_ledger.md";
      }
      this.plugin.settings.ledger_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets").setDesc("Type the classifier (only one character) and Name of the buckets you want to use, one bucket per line").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("i: Income").setValue(dictToBuckets(this.plugin.settings.bucket_names)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.bucket_names = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Sums Shown in Table").setDesc("In the order that the buckets should appear in the table add (one row for each bucket) which sum combinations should be shown at the bottom of the table. Only '+' and '-' are supported.\nEach combination should start with one of the following Symbols: '+' to show the sign of the sum, '-' to show the opposite of the sign, and '0' to not show positive signs.").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("e: -e,-g+f+e").setValue(dictToBuckets(this.plugin.settings.table_sums)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.table_sums = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display Transactions in Table").setDesc("Add a list of the transactions to the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_transactions).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_transactions = !this.plugin.settings.include_transactions;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display piechart for each month").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_piechart).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_piechart = !this.plugin.settings.include_piechart;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.include_piechart) {
      new obsidian.Setting(containerEl).setName("Buckets to display in piechart").setDesc("Separated by comma.").addTextArea((text) => text.setValue(this.plugin.settings.piechart_buckets.join(",")).onChange((value) => __awaiter(this, void 0, void 0, function* () {
        this.plugin.settings.piechart_buckets = value.split(",");
        yield this.plugin.saveSettings();
      })));
    }
  }
};
module.exports = CronievBookkeeping;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgb2JzaWRpYW4gPSByZXF1aXJlKCdvYnNpZGlhbicpO1xuXG5jbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmcgZXh0ZW5kcyBvYnNpZGlhbi5QbHVnaW4ge1xuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cdFx0Ly8gY29uc3QgcG90c19uYW1lcyA9IFtcIkJlc29yZ3VuZ1wiLFwiRWlua2F1ZlwiLFwiRnJlaVwiLFwiR2VsZFwiLFwiSW50YWtlXCIsXCJTb25zdGlnZXNcIixcIldpZWRlcmhvbHVuZ1wiXVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBwbHVnaW4gQ3JvbmlldkJvb2trZWVwaW5nLi4uJyk7XG5cdFx0XHR5aWVsZCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYih0aGlzLmFwcCx0aGlzKSk7XG5cdFx0XHR5aWVsZCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ3VwZGF0ZS1sZWRnZXInLFxuXHRcdFx0XHRuYW1lOiAnVXBkYXRlIExlZGdlcicsXG5cdFx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVMZWRnZXIoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0aG90a2V5czogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyczogWydDdHJsJ10sXG5cdFx0XHRcdFx0XHRcdFx0a2V5OiAnTCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIG9udW5sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnVW5sb2FkaW5nIHBsdWdpbiBDcm9uaWV2Qm9va2tlZXBpbmcuLi4nKTtcblx0fVxuXHRsb2FkU2V0dGluZ3MoKSB7XG5cdFx0XHRyZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCB5aWVsZCB0aGlzLmxvYWREYXRhKCkpO1xuXHRcdFx0fSk7XG5cdH1cblx0c2F2ZVNldHRpbmdzKCkge1xuXHRcdFx0cmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0XHR5aWVsZCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRhc3luYyB1cGRhdGVMZWRnZXIoKXtcblx0XHRjb25zb2xlLmxvZyhcIkNyb25pZXYgQm9va2tlZXBpbmc6IENvbXBpbGluZyBmaWxlIFwiK3RoaXMuc2V0dGluZ3MudHJhbnNhY3Rpb25fZmlsZStcIiBpbnRvIGZpbGUgXCIrdGhpcy5zZXR0aW5ncy5sZWRnZXJfZmlsZSk7XG5cdFx0bGV0IGRvY19sZWRnZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy5sZWRnZXJfZmlsZSk7XG5cdFx0dmFyIHN0cl90cmFuc2FjdGlvbnM7XG5cdFx0dHJ5e1xuXHRcdFx0c3RyX3RyYW5zYWN0aW9ucyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQodGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMuc2V0dGluZ3MudHJhbnNhY3Rpb25fZmlsZSkpO1xuXHRcdFx0dGhpcy5hcHAudmF1bHQubW9kaWZ5KGRvY19sZWRnZXIsIFwiUHJvY2Vzc2luZy4uLlwiKTtcblx0XHR9IGNhdGNoKGUpe1xuXHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3Ipe1xuXHRcdFx0XHR0aHJvdyBuZXcgTGVkZ2VyRXJyb3IoXCJZb3VyIHRyYW5zYWN0aW9uIGFuZC9vciBsZWRnZXIgZmlsZSBkb2VzIG5vdCBleGlzdFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGNoZWNrU2V0dGluZ3ModGhpcy5zZXR0aW5ncy5idWNrZXRfbmFtZXMsdGhpcy5zZXR0aW5ncy5waWVjaGFydF9idWNrZXRzKTtcblxuXHRcdFx0Ly8gQXVmdGVpbGVuIGFsbGVyIFplaWxlbiBpbiBhcnJheXMgbWl0IFplaWxlbiBlaW5lcyBNb25hdHMuXG5cdFx0XHRsZXQgbW9udGhzX21hcCA9IG1ha2VNb250aHNNYXAoc3RyX3RyYW5zYWN0aW9ucy5zcGxpdChcIlxcblwiKSk7XG5cdFx0XHQvLyBBbGxlIFRhYmVsbGVuIHVuZCBcdTAwRENiZXJzY2hyaWZ0ZW4gd2VyZGVuIGluIGVpbmVyIFN0cmluZyBnZXNhbW1lbHRcblx0XHRcdGxldCBuZXdfZG9jID0gXCJcIjtcblx0XHRcdC8vIFRhYmVsbGVua1x1MDBGNnBmZVxuXHRcdFx0bGV0IGJ1Y2tldHNfbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuc2V0dGluZ3MudGFibGVfc3Vtcyk7XG5cdFx0XHRsZXQgdGFibGVfaGVhZCA9IG1ha2VUYWJsZUhlYWQoYnVja2V0c19saXN0LCB0aGlzLnNldHRpbmdzLmJ1Y2tldF9uYW1lcyk7XG5cdFx0XHRsZXQgZW1wdHlfcm93ID0gbWFrZUVtcHR5VGFibGVSb3coYnVja2V0c19saXN0Lmxlbmd0aCk7XG5cdFx0XHQvLyBWb3JsYWdlIGZcdTAwRkNyIFNvcnRpZXJ1bmdcblx0XHRcdGxldCBzb3J0ZWRfYnVja2V0cyA9IG5ldyBNYXA8c3RyaW5nLGFycmF5PigpO1xuXHRcdFx0T2JqZWN0LmVudHJpZXModGhpcy5zZXR0aW5ncy5idWNrZXRfbmFtZXMpLmZvckVhY2goZnVuY3Rpb24oW2ssdl0pIHtcblx0XHRcdFx0c29ydGVkX2J1Y2tldHMuc2V0KGssW10pXG5cdFx0XHR9KTtcblx0XHRcdC8vIEZcdTAwRkNyIGplZGVuIE1vbmF0IFRhYmVsbGUgYW5sZWdlblxuXHRcdFx0bW9udGhzX21hcC5mb3JFYWNoKChhcnIsbW9uKSA9PiB7XG5cdFx0XHRcdC8vIEVpbnRyXHUwMEU0Z2UgbmFjaCBCdWNrZXRzIHNvcnRpZXJlblxuXHRcdFx0XHRsZXQgc29ydGVkX2J1Y2tldHNfbW9uID0gbmV3IE1hcChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oc29ydGVkX2J1Y2tldHMpKSkpO1xuXHRcdFx0XHRzb3J0VHJhbnNhY3Rpb25zKHNvcnRlZF9idWNrZXRzX21vbixhcnIpO1xuXHRcdFx0XHQvLyBzZXR0aW5ncy5UYWJsZV9zdW1zIGVycmVjaG5lblxuXHRcdFx0XHRsZXQgYnVja2V0c19zdW1zID0gc3VtQnVja2V0cyhzb3J0ZWRfYnVja2V0c19tb24pO1xuXHRcdFx0XHRsZXQgc3VtX2VudHJpZXMgPSBtYWtlU3VtRW50cmllcyhidWNrZXRzX3N1bXMsdGhpcy5zZXR0aW5ncy50YWJsZV9zdW1zKTtcblx0XHRcdFx0Ly8gLS0tLSBTdHJpbmcgZXJzdGVsbGVuIC0tLS1cblx0XHRcdFx0Ly8gXHUwMERDYmVyc2NocmlmdCBwbHVzIFRhYmVsbGVua29wZlxuXHRcdFx0XHRuZXdfZG9jICs9IG1vbiArIFwiXFxuXCIgKyB0YWJsZV9oZWFkO1xuXHRcdFx0XHQvLyBJRiBwbHVnaW4uc2V0dGluZy5pbmNsdWRlX3RyYW5zYWN0aW9uczogWmVpbGVud2Vpc2UgRWludHJcdTAwRTRnZSBoaW56dWZcdTAwRkNnZW5cblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMpe1xuXHRcdFx0XHRcdG5ld19kb2MgKz0gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzX2xpc3Qsc3RyaW5naWZ5QW5kUmV2ZXJzZVRyYW5zYWN0aW9uTWFwKHNvcnRlZF9idWNrZXRzX21vbikpO1xuXHRcdFx0XHRcdG5ld19kb2MgKz0gZW1wdHlfcm93O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHNldHRpbmdzLlRhYmxlX3N1bXMgaGluenVmXHUwMEZDZ2VuXG5cdFx0XHRcdG5ld19kb2MgKz0gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzX2xpc3Qsc3VtX2VudHJpZXMpO1xuXHRcdFx0XHQvLyBwaWVjaGFydCBoaW56dWZcdTAwRkNnZW5cblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZV9waWVjaGFydCl7XG5cdFx0XHRcdFx0bmV3X2RvYyArPSBtYWtlUGllY2hhcnRGcm9tTWFwKHRoaXMuc2V0dGluZ3MucGllY2hhcnRfYnVja2V0cywgYnVja2V0c19zdW1zLCB0aGlzLnNldHRpbmdzLmJ1Y2tldF9uYW1lcyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gTGVkZ2VyIG1vZGlmaXppZXJlblxuXHRcdFx0dGhpcy5hcHAudmF1bHQubW9kaWZ5KGRvY19sZWRnZXIsIG5ld19kb2MpO1xuXHRcdH0gY2F0Y2ggKGUpe1xuXHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBMZWRnZXJFcnJvcil7XG5cdFx0XHRcdHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShkb2NfbGVkZ2VyLCBlLm1lc3NhZ2UpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdHRocm93IGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2V0dGluZ3MoYnVja2V0cywgcGllY2hhcnQpe1xuXHRmb3IgKHZhciBrIG9mIE9iamVjdC5rZXlzKGJ1Y2tldHMpKXtcblx0XHRpZihrLmxlbmd0aCA+IDEpe1xuXHRcdFx0dGhyb3cgbmV3IExlZGdlckVycm9yKFwiQnVja2V0IGNsYXNzaWZpZXJzIHNob3VsZCBvbmx5IGJlIDEgY2hhcmFjdGVyIGxvbmc6IGBcIitrK1wiYFxcblBsZWFzZSBjaGVjayB5b3VyICdCdWNrZXRzJyBTZXR0aW5nc1wiKTtcblx0XHR9XG5cdH1cblx0Zm9yICh2YXIgayBvZiBwaWVjaGFydCkge1xuXHRcdGlmKE9iamVjdC5rZXlzKGJ1Y2tldHMpLmluZGV4T2YoaykgPT0gLTEpe1xuXHRcdFx0dGhyb3cgbmV3IExlZGdlckVycm9yKFwiWW91IGFyZSB0cnlpbmcgdG8gcGllY2hhcnQgYW4gdW5kZWNsYXJlZCBidWNrZXQ6IGBcIitrK1wiYFxcblBsZWFzZSBjaGVjayB5b3VyICdCdWNrZXRzIHRvIGRpc3BsYXkgaW4gcGllY2hhcnQnIFNldHRpbmdzXCIpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBtYWtlTW9udGhzTWFwKGFycl90cmFuc2FjdGlvbnMpe1xuXHRsZXQgbW9udGhzX21hcCA9IG5ldyBNYXA8c3RyaW5nLGFycmF5PigpO1xuXHRsZXQgbW9udGg6c3RyaW5nO1xuXHRmb3IgKGNvbnN0IGxpbmUgb2YgYXJyX3RyYW5zYWN0aW9ucyl7XG5cdFx0aWYgKGxpbmU9PVwiXFxuXCIgfHwgbGluZT09XCJcIil7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0Ly8gRmFsbHMgZXMgZWluZSBcdTAwRENiZXJzY2hyaWZ0IGlzdCwgbmV1ZXMgRWxlbWVudCBpbSBEaWN0IGFubGVnZW4uXG5cdFx0aWYgKGxpbmUuaW5kZXhPZihcIiNcIikgIT0gLTEpe1xuXHRcdFx0bW9udGggPSBsaW5lO1xuXHRcdFx0bGV0IGFycjpzdHJpbmdbXSA9IFtdO1xuXHRcdFx0bW9udGhzX21hcC5zZXQobW9udGgsYXJyKTtcblx0XHR9ZWxzZXsgLy8gQW5zb25zdGVuIGRpZSBaZWlsZW4gc2FtbWVsbi5cblx0XHRcdGxldCBhcnI6c3RyaW5nW10gPSBtb250aHNfbWFwLmdldChtb250aCk7XG5cdFx0XHRhcnIucHVzaChsaW5lKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1vbnRoc19tYXBcbn1cblxuZnVuY3Rpb24gbWFrZVRhYmxlSGVhZChidWNrZXRzLGJ1Y2tldF9uYW1lcyl7XG5sZXQgdGFibGVfaGVhZCA9IFwifFwiO1xubGV0IHRhYmxlX2hlYWQyPVwifFwiO1xuZm9yIChjb25zdCBiIG9mIGJ1Y2tldHMpe1xuXHR0YWJsZV9oZWFkICs9IGJ1Y2tldF9uYW1lc1tiXStcInxcIjtcblx0dGFibGVfaGVhZDIgKz0gXCIgLS0tIHxcIjtcbn1cbnJldHVybiB0YWJsZV9oZWFkICsgXCJcXG5cIiArIHRhYmxlX2hlYWQyICsgXCJcXG5cIjtcbn1cblxuZnVuY3Rpb24gc29ydFRyYW5zYWN0aW9ucyhtYXAsYXJyKXtcblx0Zm9yIChjb25zdCB0IG9mIGFycil7XG5cdFx0bGV0IHNwbGl0ID0gbWFrZVRyYW5zYWN0aW9uKHQpO1xuXHRcdGlmICghbWFwLmhhcyhzcGxpdFswXSkpeyAvLyBJcyB2YWxpZCBidWNrZXQ/XG5cdFx0XHR0aHJvdyBuZXcgTGVkZ2VyRXJyb3IoXCJVbmRlZmluZWQgQnVja2V0IHVzZWQ6IChcIit0K1wiKVwiKTtcblx0XHR9XG5cdFx0bWFwLmdldChzcGxpdFswXSkucHVzaChzcGxpdC5zbGljZSgxKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gbWFrZVRyYW5zYWN0aW9uKHQsIGJ1Y2tldHMpe1xuXHRsZXQgc3BsaXQgPSB0LnNwbGl0KFwiIFwiKTtcblx0aWYgKHNwbGl0WzBdID09IFwiXCIgfHwgc3BsaXRbMV0gPT0gXCJcIil7XG5cdFx0dGhyb3cgbmV3IExlZGdlckVycm9yKFwiVG9vIG1hbnkgc3BhY2VzIGJlZm9yZSBidWNrZXQgb3IgYW1vdW50OiAoXCIrdCtcIilcIik7XG5cdH1cblx0bGV0IGRlc2MgPSBzcGxpdC5zbGljZSgyKS5qb2luKFwiIFwiKTtcblx0aWYgKGlzTmFOKHNwbGl0WzFdKSl7XG5cdFx0dGhyb3cgbmV3IExlZGdlckVycm9yKFwiQW1vdW50IGlzIG5vdCBhIG51bWJlcjogKFwiK3QrXCIpXCIpO1xuXHR9XG5cdHJldHVybiBbc3BsaXRbMF0sc3BsaXRbMV0sZGVzY107XG59XG5cbmZ1bmN0aW9uIHN1bUJ1Y2tldHMobWFwKXtcblx0bGV0IHN1bXMgPSBuZXcgTWFwPHN0cmluZyxmbG9hdD4oKTtcblx0bWFwLmZvckVhY2goKHRzLGIpID0+IHtcblx0XHRsZXQgc3VtID0gMDtcblx0XHRmb3IgKGNvbnN0IHQgb2YgdHMpe1xuXHRcdFx0c3VtICs9IHBhcnNlRmxvYXQodCk7XG5cdFx0fVxuXHRcdHN1bXMuc2V0KGIsc3VtLnRvRml4ZWQoMikpO1xuXHR9KTtcblx0cmV0dXJuIHN1bXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VTdW1FbnRyaWVzKHN1bXMsIHRhYmxlX3N1bXMpe1xuXHRsZXQgc3VtX2VudHJpZXMgPSBuZXcgTWFwPHN0cmluZyxhcnJheT4oKTtcblx0T2JqZWN0LmVudHJpZXModGFibGVfc3VtcykuZm9yRWFjaChmdW5jdGlvbihbayx2XSl7XG5cdFx0aWYgKCFzdW1zLmhhcyhrKSl7XG5cdFx0XHR0aHJvdyBuZXcgTGVkZ2VyRXJyb3IoXCJZb3Ugd2FudCB0byBkaXNwbGF5IGFuIHVuZGVjbGFyZWQgYnVja2V0IGluIHRoZSB0YWJsZTogYFwiK2srXCJgXFxuUGxlYXNlIGNoZWNrIHlvdXIgJ1N1bXMgU2hvd24gaW4gVGFibGUnIFNldHRpbmdzXCIpO1xuXHRcdH1cblx0XHRzdW1fZW50cmllcy5zZXQoayxbXSk7XG5cdFx0bGV0IGNvbWJpbmF0aW9ucyA9IHYuc3BsaXQoXCIsXCIpO1xuXHRcdGZvciAodmFyIHMgb2YgY29tYmluYXRpb25zKXtcblx0XHRcdGxldCB2b3J6ZWljaGVuID0gMTtcblx0XHRcdGxldCB0bXAgPSAwO1xuXHRcdFx0bGV0IHN0clZ6ID0gc1swXTtcblx0XHRcdGZvciAoY29uc3QgYyBvZiBzLnNsaWNlKDEpKXtcblx0XHRcdFx0aWYgKGMgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGMgPT0gXCItXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAtMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoIXN1bXMuaGFzKGMpKXtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBMZWRnZXJFcnJvcihcIllvdSBhcmUgdHJ5aW5nIHRvIGNhbGN1bGF0ZSB3aXRoIGFuIHVuZGVjbGFyZWQgYnVja2V0OiBgXCIrYytcImAgaW4gYFwiK2srXCI6IFwiK3MrXCJgXFxuUGxlYXNlIGNoZWNrIHlvdXIgJ1N1bXMgU2hvd24gaW4gVGFibGUnIFNldHRpbmdzXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0bXAgKz0gdm9yemVpY2hlbiogcGFyc2VGbG9hdChzdW1zLmdldChjKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHN3aXRjaChzdHJWeil7XG5cdFx0XHRcdGNhc2UgXCIrXCI6XG5cdFx0XHRcdFx0aWYgKHRtcCA8IDApe1xuXHRcdFx0XHRcdFx0c3RyVnogPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIi1cIjpcblx0XHRcdFx0XHRpZiAodG1wIDwwKXtcblx0XHRcdFx0XHRcdHN0clZ6ID0gXCIrXCI7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRzdHJWeiA9IFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRtcCAqPSAtMTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIjBcIjpcblx0XHRcdFx0XHRzdHJWeiA9IFwiXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzdW1fZW50cmllcy5nZXQoaykucHVzaChzdHJWeiArIHRtcC50b0ZpeGVkKDIpKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gc3VtX2VudHJpZXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eVRhYmxlUm93KGxlbmEpe1xuXHRsZXQgcm93ID0gXCJ8XCI7XG5cdGZvciAobGV0IGk9MDtpPGxlbmE7aSsrICkge1xuXHRcdHJvdyArPSBcIiB8XCI7XG5cdH1cblx0cmV0dXJuIHJvdytcIlxcblwiO1xufVxuICAgXG5mdW5jdGlvbiBzdHJpbmdpZnlBbmRSZXZlcnNlVHJhbnNhY3Rpb25NYXAobWFwKXtcblx0bGV0IG5ld19tYXAgPSBuZXcgTWFwPHN0cmluZyxhcnJheT4oKTtcblx0bWFwLmZvckVhY2goKHYsaykgPT4ge1xuXHRcdGxldCBsaXN0ID0gW107XG5cdFx0Zm9yIChjb25zdCBlbGVtZW50IG9mIHYpe1xuXHRcdFx0bGlzdC5wdXNoKGVsZW1lbnQuam9pbihcIiBcIikpO1xuXHRcdH1cblx0XHRuZXdfbWFwLnNldChrLGxpc3QucmV2ZXJzZSgpKTtcblx0fSk7XG5cdHJldHVybiBuZXdfbWFwO1xufVxuICBcbmZ1bmN0aW9uIG1ha2VUYWJsZUZyb21NYXAoYnVja2V0cywgbWFwKXtcblx0bGV0IGV4aGF1c3RlZCA9IFtdO1xuXHRsZXQgdGFibGUgPSBcIlwiO1xuXHRsZXQgcm93ID0gMDtcblx0YnVja2V0cy5mb3JFYWNoKGVsZW1lbnQgPT4geyBleGhhdXN0ZWQucHVzaCgwKTt9KTtcblx0d2hpbGUgKGV4aGF1c3RlZC5pbmNsdWRlcygwKSl7XG5cdFx0dGFibGUgKz0gXCJ8XCI7XG5cdFx0Zm9yIChsZXQgaT0wO2k8YnVja2V0cy5sZW5ndGg7aSsrKXtcblx0XHRcdGlmIChleGhhdXN0ZWRbaV0gPT0gMCl7XG5cdFx0XHRcdGxldCBtYXBfZWwgPSBtYXAuZ2V0KGJ1Y2tldHNbaV0pO1xuXHRcdFx0XHRpZiAobWFwX2VsW3Jvd10gIT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHR0YWJsZSArPSBtYXBfZWxbcm93XTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWFwX2VsLmxlbmd0aCA8PSByb3crMSl7XG5cdFx0XHRcdFx0ZXhoYXVzdGVkW2ldID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGFibGUgKz0gXCIgfFwiO1xuXHRcdH1cblx0XHR0YWJsZSArPSBcIlxcblwiO1xuXHRcdHJvdysrO1xuXHR9XG5cdHJldHVybiB0YWJsZTtcbn1cblxuZnVuY3Rpb24gbWFrZVBpZWNoYXJ0RnJvbU1hcChidWNrZXRzLCBtYXAsIG5hbWVzKXtcblx0cmVzdWx0ID0gXCI+WyFpbmZvXS0gUGllY2hhcnRcXG4+IGBgYG1lcm1haWRcXG4+IHBpZVxcblwiXG5cdGZvciAoY29uc3QgYiBvZiBidWNrZXRzKXtcblx0XHRyZXN1bHQgKz0gJz4gXCInK25hbWVzW2JdKydcIjonK21hcC5nZXQoYikrXCJcXG5cIjtcblx0fVxuXHRyZXN1bHQgKz0gXCI+IGBgYFxcblxcblwiO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBidWNrZXRzVG9EaWN0KGJ1Y2tldHNJbnB1dCl7XG5cdGxldCBidWNrZXRzOiBhcnJheSA9IGJ1Y2tldHNJbnB1dC5zcGxpdChcIlxcblwiKTtcblx0bGV0IGRpY3QgPSB7fTtcblx0Zm9yIChjb25zdCBiIG9mIGJ1Y2tldHMpe1xuXHRcdGlmIChiICE9IFwiXCIpe1xuXHRcdFx0c3BsaXQgPSBiLnNwbGl0KFwiOiBcIik7XG5cdFx0XHRkaWN0W3NwbGl0WzBdXSA9IHNwbGl0WzFdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGljdDtcbn1cblxuZnVuY3Rpb24gZGljdFRvQnVja2V0cyhkaWN0KXtcblx0b3V0ID0gXCJcIlxuXHRPYmplY3QuZW50cmllcyhkaWN0KS5mb3JFYWNoKGZ1bmN0aW9uKFtrLHZdKXtcblx0XHRvdXQgKz0gayArIFwiOiBcIiArIHYgK1wiXFxuXCI7XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5jbGFzcyBMZWRnZXJFcnJvciBleHRlbmRzIEVycm9ye1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlKXtcblx0XHRzdXBlcihtZXNzYWdlKTtcblx0fVxufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTID0ge1xuXHR0cmFuc2FjdGlvbl9maWxlOiBcIl90cmFuc2FjdGlvbnMubWRcIixcblx0bGVkZ2VyX2ZpbGU6IFwiX2xlZGdlci5tZFwiLFxuXHRidWNrZXRfbmFtZXM6IHsncyc6XCJTYXZpbmdzXCIsJ2knOlwiSW5jb21lXCIsJ3InOlwiUmVjdXJyaW5nXCIsJ2UnOlwiRXJyYW5kc1wiLCd4JzogXCJFbHNlXCIsJ2YnOlwiRnJlZXRpbWVcIiwnZyc6XCJHcm9jZXJpZXNcIn0sXG5cdHRhYmxlX3N1bXM6IHsnZyc6XCItZ1wiLCdmJzpcIi1mXCIsJ2UnOlwiLWUsLWcrZitlXCIsJ3gnOlwiLXgsLWcrZitlK3hcIiwncic6XCItciwtZytmK2UreCtyXCIsJ2knOlwiK2ksK2ktZy1mLWUteC1yLDBzK2ktZy1mLWUteC1yXCJ9LFxuXHRpbmNsdWRlX3RyYW5zYWN0aW9uczogdHJ1ZSxcblx0aW5jbHVkZV9waWVjaGFydDogZmFsc2UsXG5cdHBpZWNoYXJ0X2J1Y2tldHM6IFtcImdcIixcImZcIixcImVcIixcInhcIixcInJcIl1cbn1cblxuY2xhc3MgQ3JvbmlldkJvb2trZWVwaW5nU2V0dGluZ3NUYWIgZXh0ZW5kcyBvYnNpZGlhbi5QbHVnaW5TZXR0aW5nVGFiIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwbHVnaW4pIHtcbiAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cdGRpc3BsYXkoKSB7XG4gICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdDcm9uaWV2IEJvb2trZWVwaW5nIC0gU2V0dGluZ3MnIH0pO1xuXHRcdG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJUcmFuc2FjdGlvbnMgRmlsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBwYXRoIHRvIHRoZSBmaWxlIHlvdSB3YW50IHRvIGFkZCB0aGUgdHJhbnNhY3Rpb25zIHRvXCIpXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHRleHRcblx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIl90cmFuc2FjdGlvbnMubWRcIilcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSAnX3RyYW5zYWN0aW9ucy5tZCc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlID0gdmFsdWU7XG5cdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHQgIG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJMZWRnZXIgRmlsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBwYXRoIHRvIHRoZSBmaWxlIHlvdSB3YW50IHRoZSBsZWRnZXIgdG8gYmUgYWRkZWQgdG9cIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiX2xlZGdlci5tZFwiKVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxlZGdlcl9maWxlKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSAnX2xlZGdlci5tZCc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5sZWRnZXJfZmlsZSA9IHZhbHVlO1xuXHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fSkpKTtcblx0ICBuZXcgb2JzaWRpYW4uU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiQnVja2V0c1wiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBjbGFzc2lmaWVyIChvbmx5IG9uZSBjaGFyYWN0ZXIpIGFuZCBOYW1lIG9mIHRoZSBidWNrZXRzIHlvdSB3YW50IHRvIHVzZSwgb25lIGJ1Y2tldCBwZXIgbGluZVwiKVxuXHRcdFx0LnNldENsYXNzKFwiYm9va2tlZXBpbmctdGFsbC1maWVsZFwiKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJpOiBJbmNvbWVcIilcblx0XHRcdC5zZXRWYWx1ZShkaWN0VG9CdWNrZXRzKHRoaXMucGx1Z2luLnNldHRpbmdzLmJ1Y2tldF9uYW1lcykpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmJ1Y2tldF9uYW1lcyA9IGJ1Y2tldHNUb0RpY3QodmFsdWUpO1xuXHRcdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHQgIG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJTdW1zIFNob3duIGluIFRhYmxlXCIpXG5cdFx0XHQuc2V0RGVzYyhcIkluIHRoZSBvcmRlciB0aGF0IHRoZSBidWNrZXRzIHNob3VsZCBhcHBlYXIgaW4gdGhlIHRhYmxlIGFkZCAob25lIHJvdyBmb3IgZWFjaCBidWNrZXQpIHdoaWNoIHN1bSBjb21iaW5hdGlvbnMgc2hvdWxkIGJlIHNob3duIGF0IHRoZSBib3R0b20gb2YgdGhlIHRhYmxlLiBPbmx5ICcrJyBhbmQgJy0nIGFyZSBzdXBwb3J0ZWQuXFxuRWFjaCBjb21iaW5hdGlvbiBzaG91bGQgc3RhcnQgd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBTeW1ib2xzOiAnKycgdG8gc2hvdyB0aGUgc2lnbiBvZiB0aGUgc3VtLCAnLScgdG8gc2hvdyB0aGUgb3Bwb3NpdGUgb2YgdGhlIHNpZ24sIGFuZCAnMCcgdG8gbm90IHNob3cgcG9zaXRpdmUgc2lnbnMuXCIpXG5cdFx0XHQuc2V0Q2xhc3MoXCJib29ra2VlcGluZy10YWxsLWZpZWxkXCIpXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHRleHRcblx0XHRcdC5zZXRQbGFjZWhvbGRlcignZTogLWUsLWcrZitlJylcblx0XHRcdC5zZXRWYWx1ZShkaWN0VG9CdWNrZXRzKHRoaXMucGx1Z2luLnNldHRpbmdzLnRhYmxlX3N1bXMpKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJsZV9zdW1zID0gYnVja2V0c1RvRGljdCh2YWx1ZSk7XG5cdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHRcdC5zZXROYW1lKFwiRGlzcGxheSBUcmFuc2FjdGlvbnMgaW4gVGFibGVcIilcblx0XHRcdFx0LnNldERlc2MoXCJBZGQgYSBsaXN0IG9mIHRoZSB0cmFuc2FjdGlvbnMgdG8gdGhlIHRhYmxlLlwiKVxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMpXG5cdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3RyYW5zYWN0aW9ucyA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3RyYW5zYWN0aW9ucztcblx0XHRcdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHRcdG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKSAvL2luY2x1ZGVfcGllY2hhcnRcblx0XHRcdFx0LnNldE5hbWUoXCJEaXNwbGF5IHBpZWNoYXJ0IGZvciBlYWNoIG1vbnRoXCIpXG5cdFx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3BpZWNoYXJ0KVxuXHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV9waWVjaGFydCA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3BpZWNoYXJ0O1xuXHRcdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdH0pKSk7XG5cdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVfcGllY2hhcnQpe1xuXHRcdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpIC8vIHBpZWNoYXJ0X2J1Y2tldHNcblx0XHRcdFx0LnNldE5hbWUoXCJCdWNrZXRzIHRvIGRpc3BsYXkgaW4gcGllY2hhcnRcIilcblx0XHRcdFx0LnNldERlc2MoXCJTZXBhcmF0ZWQgYnkgY29tbWEuXCIpXG5cdFx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGllY2hhcnRfYnVja2V0cy5qb2luKFwiLFwiKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBpZWNoYXJ0X2J1Y2tldHMgPSB2YWx1ZS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSkpO1xuXHRcdH1cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENyb25pZXZCb29ra2VlcGluZztcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUksV0FBVyxRQUFRO0FBRXZCLElBQU0scUJBQU4sY0FBaUMsU0FBUyxPQUFPO0FBQUEsRUFDaEQsY0FBYTtBQUNaLFVBQU0sR0FBRyxTQUFTO0FBQUEsRUFFbkI7QUFBQSxFQUVBLEFBQU0sU0FBUztBQUFBO0FBQ2QsYUFBTyxVQUFVLE1BQU0sUUFBUSxRQUFRLGFBQWE7QUFDbkQsZ0JBQVEsSUFBSSxzQ0FBc0M7QUFDbEQsY0FBTSxLQUFLLGFBQWE7QUFDeEIsYUFBSyxjQUFjLElBQUksOEJBQThCLEtBQUssS0FBSSxJQUFJLENBQUM7QUFDbkUsY0FBTSxLQUFLLGFBQWE7QUFFeEIsYUFBSyxXQUFXO0FBQUEsVUFDZixJQUFJO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixVQUFVLE1BQU07QUFDZixpQkFBSyxhQUFhO0FBQUEsVUFDbkI7QUFBQSxVQUNBLFNBQVM7QUFBQSxZQUNQO0FBQUEsY0FDRSxXQUFXLENBQUMsTUFBTTtBQUFBLGNBQ2xCLEtBQUs7QUFBQSxZQUNQO0FBQUEsVUFDRjtBQUFBLFFBQ0QsQ0FBQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBRUEsQUFBTSxXQUFXO0FBQUE7QUFDVixjQUFRLElBQUksd0NBQXdDO0FBQUEsSUFDM0Q7QUFBQTtBQUFBLEVBQ0Es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
