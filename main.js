/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var obsidian = require("obsidian");
var CronievBookkeeping = class extends obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      return __awaiter(this, void 0, void 0, function* () {
        console.log("Loading plugin CronievBookkeeping...");
        yield this.loadSettings();
        this.addSettingTab(new CronievBookkeepingSettingsTab(this.app, this));
        yield this.saveSettings();
        this.addCommand({
          id: "update-ledger",
          name: "Update Ledger",
          callback: () => {
            this.updateLedger();
          },
          hotkeys: [
            {
              modifiers: ["Ctrl"],
              key: "L"
            }
          ]
        });
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      let doc_ledger = this.app.vault.getAbstractFileByPath(this.settings.ledger_file);
      const str_transactions = yield this.app.vault.read(this.app.vault.getAbstractFileByPath(this.settings.transaction_file));
      let months_map = makeMonthsMap(str_transactions.split("\n"));
      let new_doc = "";
      let buckets_list = Object.keys(this.settings.table_sums);
      let table_head = makeTableHead(buckets_list, this.settings.bucket_names);
      let empty_row = makeEmptyTableRow(buckets_list.length);
      let sorted_buckets = /* @__PURE__ */ new Map();
      Object.entries(this.settings.bucket_names).forEach(function([k, v]) {
        sorted_buckets.set(k, []);
      });
      months_map.forEach((arr, mon) => {
        let sorted_buckets_mon = new Map(JSON.parse(JSON.stringify(Array.from(sorted_buckets))));
        sortTransactions(sorted_buckets_mon, arr);
        let sum_entries = makeSumEntries(sumBuckets(sorted_buckets_mon), this.settings.table_sums);
        new_doc += mon + "\n" + table_head;
        if (this.settings.include_transactions) {
          new_doc += makeTableFromMap(buckets_list, stringifyTransactionMap(sorted_buckets_mon));
          new_doc += empty_row;
        }
        new_doc += makeTableFromMap(buckets_list, sum_entries);
      });
      this.app.vault.modify(doc_ledger, new_doc);
    });
  }
};
function makeMonthsMap(arr_transactions) {
  let months_map = /* @__PURE__ */ new Map();
  let month;
  for (const line of arr_transactions) {
    if (line == "\n" || line == "") {
      continue;
    }
    if (line.indexOf("#") != -1) {
      month = line;
      let arr = [];
      months_map.set(month, arr);
    } else {
      let arr = months_map.get(month);
      arr.push(line);
    }
  }
  return months_map;
}
function makeTableHead(buckets, bucket_names) {
  let table_head = "|";
  let table_head2 = "|";
  for (const b of buckets) {
    table_head += bucket_names[b] + "|";
    table_head2 += " --- |";
  }
  return table_head + "\n" + table_head2 + "\n";
}
function sortTransactions(map, arr) {
  for (const t of arr) {
    let split2 = makeTransaction(t);
    map.get(split2[0]).push(split2.slice(1));
  }
}
function makeTransaction(t) {
  let split2 = t.split(" ");
  let desc = split2.slice(2).join(" ");
  return [split2[0], split2[1], desc];
}
function sumBuckets(map) {
  let sums = /* @__PURE__ */ new Map();
  map.forEach((ts, b) => {
    let sum = 0;
    for (const t of ts) {
      sum += parseFloat(t);
    }
    sums.set(b, sum.toFixed(2));
  });
  return sums;
}
function makeSumEntries(sums, table_sums) {
  let sum_entries = /* @__PURE__ */ new Map();
  Object.entries(table_sums).forEach(function([k, v]) {
    sum_entries.set(k, []);
    let combinations = v.split(",");
    for (const s of combinations) {
      let vorzeichen = 1;
      let tmp = 0;
      for (const c of s) {
        if (c == "+") {
          vorzeichen = 1;
        } else if (c == "-") {
          vorzeichen = -1;
        } else {
          tmp += vorzeichen * parseFloat(sums.get(c));
        }
      }
      sum_entries.get(k).push(tmp.toFixed(2));
    }
  });
  return sum_entries;
}
function makeEmptyTableRow(len) {
  let row = "|";
  for (let i = 0; i < len; i++) {
    row += " |";
  }
  return row + "\n";
}
function stringifyTransactionMap(map) {
  let new_map = /* @__PURE__ */ new Map();
  map.forEach((v, k) => {
    let list = [];
    for (const element of v) {
      list.push(element.join(" "));
    }
    new_map.set(k, list);
  });
  return new_map;
}
function makeTableFromMap(buckets, map) {
  let exhausted = [];
  let table = "";
  let row = 0;
  buckets.forEach((element) => {
    exhausted.push(0);
  });
  while (exhausted.includes(0)) {
    table += "|";
    for (let i = 0; i < buckets.length; i++) {
      if (exhausted[i] == 0) {
        let map_el = map.get(buckets[i]);
        if (map_el[row] != void 0) {
          table += map_el[row];
        }
        if (map_el.length <= row + 1) {
          exhausted[i] = 1;
        }
      }
      table += " |";
    }
    table += "\n";
    row++;
  }
  return table;
}
function bucketsToDict(bucketsInput) {
  let buckets = bucketsInput.split("\n");
  let dict = {};
  for (const b of buckets) {
    if (b != "") {
      split = b.split(": ");
      dict[split[0]] = split[1];
    }
  }
  return dict;
}
function dictToBuckets(dict) {
  out = "";
  Object.entries(dict).forEach(function([k, v]) {
    out += k + ": " + v + "\n";
  });
  return out;
}
var DEFAULT_SETTINGS = {
  transaction_file: "_transactions.md",
  ledger_file: "_ledger.md",
  bucket_names: { "g": "Geld", "i": "Income", "w": "Wiederholung", "b": "Besorgung", "s": "Sonstiges", "f": "Freizeit", "e": "Einkaufen" },
  table_sums: { "e": "e", "f": "f", "b": "b,e+f+b", "s": "s,e+f+b+s", "w": "w,e+f+b+s+w", "i": "i,i-e-f-b-s-w,g+i-e-f-b-s-w" },
  include_transactions: true
};
var CronievBookkeepingSettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Bookkeeping - Settings" });
    new obsidian.Setting(containerEl).setName("Transactions file").setDesc("Type the path to the file you want to add the transactions to").addTextArea((text) => text.setPlaceholder("_transactions.md").setValue(this.plugin.settings.transaction_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_transactions.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Ledger file").setDesc("Type the path to the file you want the ledger to be added to").addTextArea((text) => text.setPlaceholder("_ledger.md").setValue(this.plugin.settings.ledger_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_ledger.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets").setDesc("Type the classifier and Name of the buckets you want to use, one bucket per line").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("i: Income").setValue(dictToBuckets(this.plugin.settings.bucket_names)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.bucket_names = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Sums shown in table").setDesc("In the order that the buckets should appear in the table add (one row for each bucket) which sum combinations should be shown at the bottom of the table. Only '+' and '-' are supported.").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("b: b,b+e,e+f+b").setValue(dictToBuckets(this.plugin.settings.table_sums)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.table_sums = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display every transaction").setDesc("Add a list of the transactions to the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_transactions).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_transactions = !this.plugin.settings.include_transactions;
      yield this.plugin.saveSettings();
    })));
  }
};
module.exports = CronievBookkeeping;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgb2JzaWRpYW4gPSByZXF1aXJlKCdvYnNpZGlhbicpO1xuXG5jbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmcgZXh0ZW5kcyBvYnNpZGlhbi5QbHVnaW4ge1xuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cdFx0Ly8gY29uc3QgcG90c19uYW1lcyA9IFtcIkJlc29yZ3VuZ1wiLFwiRWlua2F1ZlwiLFwiRnJlaVwiLFwiR2VsZFwiLFwiSW50YWtlXCIsXCJTb25zdGlnZXNcIixcIldpZWRlcmhvbHVuZ1wiXVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBwbHVnaW4gQ3JvbmlldkJvb2trZWVwaW5nLi4uJyk7XG5cdFx0XHR5aWVsZCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYih0aGlzLmFwcCx0aGlzKSk7XG5cdFx0XHR5aWVsZCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ3VwZGF0ZS1sZWRnZXInLFxuXHRcdFx0XHRuYW1lOiAnVXBkYXRlIExlZGdlcicsXG5cdFx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVMZWRnZXIoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0aG90a2V5czogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyczogWydDdHJsJ10sXG5cdFx0XHRcdFx0XHRcdFx0a2V5OiAnTCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIG9udW5sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnVW5sb2FkaW5nIHBsdWdpbiBDcm9uaWV2Qm9va2tlZXBpbmcuLi4nKTtcblx0fVxuXHRsb2FkU2V0dGluZ3MoKSB7XG5cdFx0XHRyZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCB5aWVsZCB0aGlzLmxvYWREYXRhKCkpO1xuXHRcdFx0fSk7XG5cdH1cblx0c2F2ZVNldHRpbmdzKCkge1xuXHRcdFx0cmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0XHR5aWVsZCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRhc3luYyB1cGRhdGVMZWRnZXIoKXtcblx0XHRsZXQgZG9jX2xlZGdlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnNldHRpbmdzLmxlZGdlcl9maWxlKTtcblx0XHRjb25zdCBzdHJfdHJhbnNhY3Rpb25zID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlKSk7XG5cblx0XHQvLyBBdWZ0ZWlsZW4gYWxsZXIgWmVpbGVuIGluIGFycmF5cyBtaXQgWmVpbGVuIGVpbmVzIE1vbmF0cy5cblx0XHRsZXQgbW9udGhzX21hcCA9IG1ha2VNb250aHNNYXAoc3RyX3RyYW5zYWN0aW9ucy5zcGxpdChcIlxcblwiKSk7XG5cdFx0Ly8gQWxsZSBUYWJlbGxlbiB1bmQgXHUwMERDYmVyc2NocmlmdGVuIHdlcmRlbiBpbiBlaW5lciBTdHJpbmcgZ2VzYW1tZWx0XG5cdFx0bGV0IG5ld19kb2MgPSBcIlwiO1xuXHRcdC8vIFRhYmVsbGVua1x1MDBGNnBmZVxuXHRcdGxldCBidWNrZXRzX2xpc3QgPSBPYmplY3Qua2V5cyh0aGlzLnNldHRpbmdzLnRhYmxlX3N1bXMpO1xuXHRcdGxldCB0YWJsZV9oZWFkID0gbWFrZVRhYmxlSGVhZChidWNrZXRzX2xpc3QsIHRoaXMuc2V0dGluZ3MuYnVja2V0X25hbWVzKTtcblx0XHRsZXQgZW1wdHlfcm93ID0gbWFrZUVtcHR5VGFibGVSb3coYnVja2V0c19saXN0Lmxlbmd0aCk7XG5cdFx0Ly8gVm9ybGFnZSBmXHUwMEZDciBTb3J0aWVydW5nXG5cdFx0bGV0IHNvcnRlZF9idWNrZXRzID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdFx0T2JqZWN0LmVudHJpZXModGhpcy5zZXR0aW5ncy5idWNrZXRfbmFtZXMpLmZvckVhY2goZnVuY3Rpb24oW2ssdl0pIHtcblx0XHRcdHNvcnRlZF9idWNrZXRzLnNldChrLFtdKVxuXHRcdH0pO1xuXHRcdC8vIEZcdTAwRkNyIGplZGVuIE1vbmF0IFRhYmVsbGUgYW5sZWdlblxuXHRcdG1vbnRoc19tYXAuZm9yRWFjaCgoYXJyLG1vbikgPT4ge1xuXHRcdFx0Ly8gRWludHJcdTAwRTRnZSBuYWNoIEJ1Y2tldHMgc29ydGllcmVuXG5cdFx0XHRsZXQgc29ydGVkX2J1Y2tldHNfbW9uID0gbmV3IE1hcChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oc29ydGVkX2J1Y2tldHMpKSkpO1xuXHRcdFx0c29ydFRyYW5zYWN0aW9ucyhzb3J0ZWRfYnVja2V0c19tb24sYXJyKTtcblx0XHRcdC8vIHNldHRpbmdzLlRhYmxlX3N1bXMgZXJyZWNobmVuXG5cdFx0XHRsZXQgc3VtX2VudHJpZXMgPSBtYWtlU3VtRW50cmllcyhzdW1CdWNrZXRzKHNvcnRlZF9idWNrZXRzX21vbiksdGhpcy5zZXR0aW5ncy50YWJsZV9zdW1zKTtcblx0XHRcdC8vIC0tLS0gU3RyaW5nIGVyc3RlbGxlbiAtLS0tXG5cdFx0XHQvLyBcdTAwRENiZXJzY2hyaWZ0IHBsdXMgVGFiZWxsZW5rb3BmXG5cdFx0XHRuZXdfZG9jICs9IG1vbiArIFwiXFxuXCIgKyB0YWJsZV9oZWFkO1xuXHRcdFx0Ly8gSUYgcGx1Z2luLnNldHRpbmcuaW5jbHVkZV90cmFuc2FjdGlvbnM6IFplaWxlbndlaXNlIEVpbnRyXHUwMEU0Z2UgaGluenVmXHUwMEZDZ2VuXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5pbmNsdWRlX3RyYW5zYWN0aW9ucyl7XG5cdFx0XHRcdG5ld19kb2MgKz0gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzX2xpc3Qsc3RyaW5naWZ5VHJhbnNhY3Rpb25NYXAoc29ydGVkX2J1Y2tldHNfbW9uKSk7XG5cdFx0XHRcdG5ld19kb2MgKz0gZW1wdHlfcm93O1xuXHRcdFx0fVxuXHRcdFx0Ly8gc2V0dGluZ3MuVGFibGVfc3VtcyBoaW56dWZcdTAwRkNnZW5cblx0XHRcdG5ld19kb2MgKz0gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzX2xpc3Qsc3VtX2VudHJpZXMpO1xuXHRcdH0pO1xuXHRcdC8vIExlZGdlciBtb2RpZml6aWVyZW5cblx0XHR0aGlzLmFwcC52YXVsdC5tb2RpZnkoZG9jX2xlZGdlciwgbmV3X2RvYyk7XG5cdH1cbn1cbmZ1bmN0aW9uIG1ha2VNb250aHNNYXAoYXJyX3RyYW5zYWN0aW9ucyl7XG5cdGxldCBtb250aHNfbWFwID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdGxldCBtb250aDpzdHJpbmc7XG5cdGZvciAoY29uc3QgbGluZSBvZiBhcnJfdHJhbnNhY3Rpb25zKXtcblx0XHRpZiAobGluZT09XCJcXG5cIiB8fCBsaW5lPT1cIlwiKXtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHQvLyBGYWxscyBlcyBlaW5lIFx1MDBEQ2JlcnNjaHJpZnQgaXN0LCBuZXVlcyBFbGVtZW50IGltIERpY3QgYW5sZWdlbi5cblx0XHRpZiAobGluZS5pbmRleE9mKFwiI1wiKSAhPSAtMSl7XG5cdFx0XHRtb250aCA9IGxpbmU7XG5cdFx0XHRsZXQgYXJyOnN0cmluZ1tdID0gW107XG5cdFx0XHRtb250aHNfbWFwLnNldChtb250aCxhcnIpO1xuXHRcdH1lbHNleyAvLyBBbnNvbnN0ZW4gZGllIFplaWxlbiBzYW1tZWxuLlxuXHRcdFx0bGV0IGFycjpzdHJpbmdbXSA9IG1vbnRoc19tYXAuZ2V0KG1vbnRoKTtcblx0XHRcdGFyci5wdXNoKGxpbmUpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbW9udGhzX21hcFxufVxuZnVuY3Rpb24gbWFrZVRhYmxlSGVhZChidWNrZXRzLGJ1Y2tldF9uYW1lcyl7XG5sZXQgdGFibGVfaGVhZCA9IFwifFwiO1xubGV0IHRhYmxlX2hlYWQyPVwifFwiO1xuZm9yIChjb25zdCBiIG9mIGJ1Y2tldHMpe1xuXHR0YWJsZV9oZWFkICs9IGJ1Y2tldF9uYW1lc1tiXStcInxcIjtcblx0dGFibGVfaGVhZDIgKz0gXCIgLS0tIHxcIjtcbn1cbnJldHVybiB0YWJsZV9oZWFkICsgXCJcXG5cIiArIHRhYmxlX2hlYWQyICsgXCJcXG5cIjtcbn1cbmZ1bmN0aW9uIHNvcnRUcmFuc2FjdGlvbnMobWFwLGFycil7XG5cdGZvciAoY29uc3QgdCBvZiBhcnIpe1xuXHRcdGxldCBzcGxpdCA9IG1ha2VUcmFuc2FjdGlvbih0KTtcblx0XHRtYXAuZ2V0KHNwbGl0WzBdKS5wdXNoKHNwbGl0LnNsaWNlKDEpKTtcblx0fVxufVxuZnVuY3Rpb24gbWFrZVRyYW5zYWN0aW9uKHQpe1xuXHRsZXQgc3BsaXQgPSB0LnNwbGl0KFwiIFwiKTtcblx0bGV0IGRlc2MgPSBzcGxpdC5zbGljZSgyKS5qb2luKFwiIFwiKTtcblx0cmV0dXJuIFtzcGxpdFswXSxzcGxpdFsxXSxkZXNjXTtcbn1cbmZ1bmN0aW9uIHN1bUJ1Y2tldHMobWFwKXtcblx0bGV0IHN1bXMgPSBuZXcgTWFwPHN0cmluZyxmbG9hdD4oKTtcblx0bWFwLmZvckVhY2goKHRzLGIpID0+IHtcblx0XHRsZXQgc3VtID0gMDtcblx0XHRmb3IgKGNvbnN0IHQgb2YgdHMpe1xuXHRcdFx0c3VtICs9IHBhcnNlRmxvYXQodCk7XG5cdFx0fVxuXHRcdHN1bXMuc2V0KGIsc3VtLnRvRml4ZWQoMikpO1xuXHR9KTtcblx0cmV0dXJuIHN1bXM7XG59XG5mdW5jdGlvbiBtYWtlU3VtRW50cmllcyhzdW1zLCB0YWJsZV9zdW1zKXtcblx0bGV0IHN1bV9lbnRyaWVzID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdE9iamVjdC5lbnRyaWVzKHRhYmxlX3N1bXMpLmZvckVhY2goZnVuY3Rpb24oW2ssdl0pe1xuXHRcdHN1bV9lbnRyaWVzLnNldChrLFtdKTtcblx0XHRsZXQgY29tYmluYXRpb25zID0gdi5zcGxpdChcIixcIik7XG5cdFx0Zm9yIChjb25zdCBzIG9mIGNvbWJpbmF0aW9ucyl7XG5cdFx0XHRsZXQgdm9yemVpY2hlbiA9IDE7XG5cdFx0XHRsZXQgdG1wID0gMDtcblx0XHRcdGZvciAoY29uc3QgYyBvZiBzKXtcblx0XHRcdFx0aWYgKGMgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGMgPT0gXCItXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAtMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgKz0gdm9yemVpY2hlbiogcGFyc2VGbG9hdChzdW1zLmdldChjKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHN1bV9lbnRyaWVzLmdldChrKS5wdXNoKHRtcC50b0ZpeGVkKDIpKVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBzdW1fZW50cmllcztcbn1cbmZ1bmN0aW9uIG1ha2VFbXB0eVRhYmxlUm93KGxlbil7XG5cdGxldCByb3cgPSBcInxcIjtcblx0Zm9yIChsZXQgaT0wO2k8bGVuO2krKyApe1xuXHRcdHJvdyArPSBcIiB8XCJcblx0fVxuXHRyZXR1cm4gcm93K1wiXFxuXCJcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVRyYW5zYWN0aW9uTWFwKG1hcCl7XG5cdGxldCBuZXdfbWFwID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdG1hcC5mb3JFYWNoKCh2LGspID0+IHtcblx0XHRsZXQgbGlzdCA9IFtdO1xuXHRcdGZvciAoY29uc3QgZWxlbWVudCBvZiB2KXtcblx0XHRcdGxpc3QucHVzaChlbGVtZW50LmpvaW4oXCIgXCIpKTtcblx0XHR9XG5cdFx0bmV3X21hcC5zZXQoayxsaXN0KTtcblx0fSk7XG5cdHJldHVybiBuZXdfbWFwO1xufVxuZnVuY3Rpb24gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzLCBtYXApe1xuXHRsZXQgZXhoYXVzdGVkID0gW107XG5cdGxldCB0YWJsZSA9IFwiXCI7XG5cdGxldCByb3cgPSAwO1xuXHRidWNrZXRzLmZvckVhY2goZWxlbWVudCA9PiB7IGV4aGF1c3RlZC5wdXNoKDApO30pO1xuXHR3aGlsZSAoZXhoYXVzdGVkLmluY2x1ZGVzKDApKXtcblx0XHR0YWJsZSArPSBcInxcIjtcblx0XHRmb3IgKGxldCBpPTA7aTxidWNrZXRzLmxlbmd0aDtpKyspe1xuXHRcdFx0aWYgKGV4aGF1c3RlZFtpXSA9PSAwKXtcblx0XHRcdFx0bGV0IG1hcF9lbCA9IG1hcC5nZXQoYnVja2V0c1tpXSk7XG5cdFx0XHRcdGlmIChtYXBfZWxbcm93XSAhPSB1bmRlZmluZWQpe1xuXHRcdFx0XHRcdHRhYmxlICs9IG1hcF9lbFtyb3ddO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChtYXBfZWwubGVuZ3RoIDw9IHJvdysxKXtcblx0XHRcdFx0XHRleGhhdXN0ZWRbaV0gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0YWJsZSArPSBcIiB8XCI7XG5cdFx0fVxuXHRcdHRhYmxlICs9IFwiXFxuXCI7XG5cdFx0cm93Kys7XG5cdH1cblx0cmV0dXJuIHRhYmxlO1xufVxuXG5mdW5jdGlvbiBidWNrZXRzVG9EaWN0KGJ1Y2tldHNJbnB1dCl7XG5cdGxldCBidWNrZXRzOiBhcnJheSA9IGJ1Y2tldHNJbnB1dC5zcGxpdChcIlxcblwiKTtcblx0bGV0IGRpY3QgPSB7fTtcblx0Zm9yIChjb25zdCBiIG9mIGJ1Y2tldHMpe1xuXHRcdGlmIChiICE9IFwiXCIpe1xuXHRcdFx0c3BsaXQgPSBiLnNwbGl0KFwiOiBcIik7XG5cdFx0XHRkaWN0W3NwbGl0WzBdXSA9IHNwbGl0WzFdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGljdDtcbn1cbmZ1bmN0aW9uIGRpY3RUb0J1Y2tldHMoZGljdCl7XG5cdG91dCA9IFwiXCJcblx0T2JqZWN0LmVudHJpZXMoZGljdCkuZm9yRWFjaChmdW5jdGlvbihbayx2XSl7XG5cdFx0b3V0ICs9IGsgKyBcIjogXCIgKyB2ICtcIlxcblwiO1xuXHR9KTtcblx0cmV0dXJuIG91dDtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUyA9IHtcblx0dHJhbnNhY3Rpb25fZmlsZTogXCJfdHJhbnNhY3Rpb25zLm1kXCIsXG5cdGxlZGdlcl9maWxlOiBcIl9sZWRnZXIubWRcIixcblx0YnVja2V0X25hbWVzOiB7J2cnOlwiR2VsZFwiLCdpJzpcIkluY29tZVwiLCd3JzpcIldpZWRlcmhvbHVuZ1wiLCdiJzpcIkJlc29yZ3VuZ1wiLCdzJzogXCJTb25zdGlnZXNcIiwnZic6XCJGcmVpemVpdFwiLCdlJzpcIkVpbmthdWZlblwifSxcblx0dGFibGVfc3VtczogeydlJzpcImVcIiwnZic6XCJmXCIsJ2InOlwiYixlK2YrYlwiLCdzJzpcInMsZStmK2Irc1wiLCd3JzpcIncsZStmK2Ircyt3XCIsJ2knOlwiaSxpLWUtZi1iLXMtdyxnK2ktZS1mLWItcy13XCJ9LFxuXHRpbmNsdWRlX3RyYW5zYWN0aW9uczogdHJ1ZSxcbn1cblxuY2xhc3MgQ3JvbmlldkJvb2trZWVwaW5nU2V0dGluZ3NUYWIgZXh0ZW5kcyBvYnNpZGlhbi5QbHVnaW5TZXR0aW5nVGFiIHtcbiAgY29uc3RydWN0b3IoYXBwLCBwbHVnaW4pIHtcbiAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cdGRpc3BsYXkoKSB7XG4gICAgbGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdDcm9uaWV2IEJvb2trZWVwaW5nIC0gU2V0dGluZ3MnIH0pO1xuLy8gVE9ETzogQmVudXR6ZSBGaWxlU3VnZ2VzdCAoVGVtcGxhdGVyKVxuXHRcdG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJUcmFuc2FjdGlvbnMgZmlsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBwYXRoIHRvIHRoZSBmaWxlIHlvdSB3YW50IHRvIGFkZCB0aGUgdHJhbnNhY3Rpb25zIHRvXCIpXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHRleHRcblx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIl90cmFuc2FjdGlvbnMubWRcIilcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSAnX3RyYW5zYWN0aW9ucy5tZCc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlID0gdmFsdWU7XG5cdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuLy8gVE9ETzogQmVudXR6ZSBGaWxlU3VnZ2VzdCAoVGVtcGxhdGVyKVxuXHQgIG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJMZWRnZXIgZmlsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBwYXRoIHRvIHRoZSBmaWxlIHlvdSB3YW50IHRoZSBsZWRnZXIgdG8gYmUgYWRkZWQgdG9cIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiX2xlZGdlci5tZFwiKVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxlZGdlcl9maWxlKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSAnX2xlZGdlci5tZCc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlID0gdmFsdWU7XG5cdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHQgIG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJCdWNrZXRzXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgdGhlIGNsYXNzaWZpZXIgYW5kIE5hbWUgb2YgdGhlIGJ1Y2tldHMgeW91IHdhbnQgdG8gdXNlLCBvbmUgYnVja2V0IHBlciBsaW5lXCIpXG5cdFx0XHQuc2V0Q2xhc3MoXCJib29ra2VlcGluZy10YWxsLWZpZWxkXCIpXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHRleHRcblx0XHRcdC5zZXRQbGFjZWhvbGRlcihcImk6IEluY29tZVwiKVxuXHRcdFx0LnNldFZhbHVlKGRpY3RUb0J1Y2tldHModGhpcy5wbHVnaW4uc2V0dGluZ3MuYnVja2V0X25hbWVzKSlcblx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYnVja2V0X25hbWVzID0gYnVja2V0c1RvRGljdCh2YWx1ZSk7XG5cdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdCAgbmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIlN1bXMgc2hvd24gaW4gdGFibGVcIilcblx0XHRcdC5zZXREZXNjKFwiSW4gdGhlIG9yZGVyIHRoYXQgdGhlIGJ1Y2tldHMgc2hvdWxkIGFwcGVhciBpbiB0aGUgdGFibGUgYWRkIChvbmUgcm93IGZvciBlYWNoIGJ1Y2tldCkgd2hpY2ggc3VtIGNvbWJpbmF0aW9ucyBzaG91bGQgYmUgc2hvd24gYXQgdGhlIGJvdHRvbSBvZiB0aGUgdGFibGUuIE9ubHkgJysnIGFuZCAnLScgYXJlIHN1cHBvcnRlZC5cIilcblx0XHRcdC5zZXRDbGFzcyhcImJvb2trZWVwaW5nLXRhbGwtZmllbGRcIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKCdiOiBiLGIrZSxlK2YrYicpXG5cdFx0XHQuc2V0VmFsdWUoZGljdFRvQnVja2V0cyh0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJsZV9zdW1zKSlcblx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGFibGVfc3VtcyA9IGJ1Y2tldHNUb0RpY3QodmFsdWUpO1xuXHRcdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHRcdG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0XHQuc2V0TmFtZShcIkRpc3BsYXkgZXZlcnkgdHJhbnNhY3Rpb25cIilcblx0XHRcdFx0LnNldERlc2MoXCJBZGQgYSBsaXN0IG9mIHRoZSB0cmFuc2FjdGlvbnMgdG8gdGhlIHRhYmxlLlwiKVxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMpXG5cdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMgPSAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnM7XG5cdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDcm9uaWV2Qm9va2tlZXBpbmc7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFJLFdBQVcsUUFBUTtBQUV2QixJQUFNLHFCQUFOLGNBQWlDLFNBQVMsT0FBTztBQUFBLEVBQ2hELGNBQWE7QUFDWixVQUFNLEdBQUcsU0FBUztBQUFBLEVBRW5CO0FBQUEsRUFFQSxBQUFNLFNBQVM7QUFBQTtBQUNkLGFBQU8sVUFBVSxNQUFNLFFBQVEsUUFBUSxhQUFhO0FBQ25ELGdCQUFRLElBQUksc0NBQXNDO0FBQ2xELGNBQU0sS0FBSyxhQUFhO0FBQ3hCLGFBQUssY0FBYyxJQUFJLDhCQUE4QixLQUFLLEtBQUksSUFBSSxDQUFDO0FBQ25FLGNBQU0sS0FBSyxhQUFhO0FBRXhCLGFBQUssV0FBVztB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
