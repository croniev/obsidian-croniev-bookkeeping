/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CronievBookkeeping
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var obsidian = require("obsidian");
var CronievBookkeeping = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      return __awaiter(this, void 0, void 0, function* () {
        console.log("Loading plugin CronievBookkeeping...");
        yield this.loadSettings();
        this.addSettingTab(new CronievBookkeepingSettingsTab(this.app, this));
        this.addCommand({
          id: "update-ledger",
          name: "Update Ledger",
          callback: () => {
            this.updateLedger();
          },
          hotkeys: [
            {
              modifiers: ["Ctrl"],
              key: "L"
            }
          ]
        });
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      let pots = ["b", "e", "f", "g", "i", "s", "w"];
      let doc_transactions = this.app.vault.getAbstractFileByPath("_transactions.md");
      let doc_ledger = this.app.vault.getAbstractFileByPath("_ledger.md");
      const str_transactions = yield this.app.vault.read(doc_transactions);
      let arr_transactions = str_transactions.split("\n");
      let months_map = /* @__PURE__ */ new Map();
      let i = 0;
      let month;
      for (let i2 = 0; i2 < arr_transactions.length; i2++) {
        let line = arr_transactions[i2];
        if (line == "\n" || line == "") {
          continue;
        }
        if (line.indexOf("#") != -1) {
          month = line;
          let arr = [];
          months_map.set(month, arr);
        } else {
          let arr = months_map.get(month);
          arr.push(line);
        }
      }
      let all_newLine = "";
      months_map.forEach((arr, mon) => {
        all_newLine += mon + "\n\n";
        let pots_sums = [0, 0, 0, 0, 0, 0, 0];
        for (let i2 = 0; i2 < arr.length; i2++) {
          let item = arr[i2].split(" ");
          let index = pots.indexOf(item[0]);
          if (index >= 0) {
            pots_sums[index] += Number(item[1]);
          } else {
            all_newLine += "You are using non-existent pots! (" + item[0] + ")\n\n";
          }
        }
        pots_sums = pots_sums.map(function(each_element) {
          return Number(each_element.toFixed(1));
        });
        let efb = pots_sums[1] + pots_sums[2] + pots_sums[0];
        let efbs = efb + pots_sums[5];
        let all = efbs + pots_sums[6];
        let overall = (pots_sums[4] - all).toFixed(1);
        let overall_vorzeichen = overall < 0 ? "" : "+";
        let geld = Number(pots_sums[3]) + Number(overall);
        let tabelle = "|Einkauf|Freizeit|Besorgung|Sonstiges|Wiederholung|Income|\n|-----|------|-----|-----|-----|-----|\n|" + pots_sums[1] + "|" + pots_sums[2] + "|" + pots_sums[0] + "|" + pots_sums[5] + "|" + pots_sums[6] + "|+" + pots_sums[4] + "|\n| | |" + efb + "|" + efbs + "|" + all + "|" + overall_vorzeichen + overall + "|\n| | | | | |" + geld + "|";
        all_newLine += tabelle + "\n";
      });
      this.app.vault.modify(doc_ledger, all_newLine);
    });
  }
};
function bucketsToDict(bucketsInput) {
  let buckets = bucketsInput.split("\n");
  let dict = {};
  for (const b of buckets) {
    if (b != "") {
      split = b.split(": ");
      dict[split[0]] = split[1];
    }
  }
  return dict;
}
function dictToBuckets(dict) {
  out = "";
  Object.entries(dict).forEach(function([k, v]) {
    out += k + ": " + v + "\n";
  });
  return out;
}
var DEFAULT_SETTINGS = {
  transaction_file: "_transactions.md",
  ledger_file: "_ledger.md",
  bucket_names: { "g": "Geld", "i": "Income", "w": "Wiederholung", "b": "Besorgung", "s": "Sonstiges", "f": "Freizeit", "e": "Einkaufen" },
  table_order: "e,f,b,s,w,i",
  table_sums: { "e": "e", "f": "f", "b": "b,e+f+b", "s": "s,e+f+b+s", "w": "w,e+f+b+s+w", "i": "i,i-e-f-b-s-w,g+i-e-f-b-s-w" },
  include_transactions: true
};
var CronievBookkeepingSettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Bookkeeping - Settings" });
    new obsidian.Setting(containerEl).setName("Transactions file").setDesc("Type the path to the file you want to add the transactions to").addTextArea((text) => text.setPlaceholder("_transactions.md").setValue(this.plugin.settings.transaction_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_transactions.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Ledger file").setDesc("Type the path to the file you want the ledger to be added to").addTextArea((text) => text.setPlaceholder("_ledger.md").setValue(this.plugin.settings.ledger_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_ledger.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets").setDesc("Type the classifier and Name of the buckets you want to use, one bucket per line").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("i: Income").setValue(dictToBuckets(this.plugin.settings.bucket_names)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.bucket_names = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets Order").setDesc("Type the Order the Buckets should have in the table").addTextArea((text) => text.setPlaceholder("e,f,b,s,w,i").setValue(this.plugin.settings.table_order).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "e,f,b,s,w,i";
      }
      this.plugin.settings.table_order = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Sums shown in table").setDesc("Type the Sums you would like to have displayed under each Bucket in the Table. One Bucket per row.").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("b: b,e+f+b").setValue(dictToBuckets(this.plugin.settings.table_sums)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.table_sums = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display every transaction").setDesc("Add a list of the transactions to the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_transactions).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_transactions = !this.plugin.settings.include_transactions;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgb2JzaWRpYW4gPSByZXF1aXJlKCdvYnNpZGlhbicpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmcgZXh0ZW5kcyBQbHVnaW4ge1xuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cdFx0Ly8gY29uc3QgcG90c19uYW1lcyA9IFtcIkJlc29yZ3VuZ1wiLFwiRWlua2F1ZlwiLFwiRnJlaVwiLFwiR2VsZFwiLFwiSW50YWtlXCIsXCJTb25zdGlnZXNcIixcIldpZWRlcmhvbHVuZ1wiXVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBwbHVnaW4gQ3JvbmlldkJvb2trZWVwaW5nLi4uJyk7XG5cdFx0XHR5aWVsZCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYih0aGlzLmFwcCx0aGlzKSk7XG5cdFx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRcdGlkOiAndXBkYXRlLWxlZGdlcicsXG5cdFx0XHRcdG5hbWU6ICdVcGRhdGUgTGVkZ2VyJyxcblx0XHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUxlZGdlcigpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRob3RrZXlzOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0bW9kaWZpZXJzOiBbJ0N0cmwnXSxcblx0XHRcdFx0XHRcdFx0XHRrZXk6ICdMJyxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdF1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgcGx1Z2luIENyb25pZXZCb29ra2VlcGluZy4uLicpO1xuXHR9XG5cdGxvYWRTZXR0aW5ncygpIHtcblx0XHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIHlpZWxkIHRoaXMubG9hZERhdGEoKSk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIHVwZGF0ZUxlZGdlcigpe1xuXHRcdGxldCBwb3RzID0gW1wiYlwiLFwiZVwiLFwiZlwiLFwiZ1wiLFwiaVwiLFwic1wiLFwid1wiXTtcblx0XHRsZXQgZG9jX3RyYW5zYWN0aW9ucyA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIl90cmFuc2FjdGlvbnMubWRcIik7XG5cdFx0bGV0IGRvY19sZWRnZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoXCJfbGVkZ2VyLm1kXCIpO1xuXHRcdGNvbnN0IHN0cl90cmFuc2FjdGlvbnMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGRvY190cmFuc2FjdGlvbnMpO1xuXHRcdGxldCBhcnJfdHJhbnNhY3Rpb25zOiBhcnJheSA9IHN0cl90cmFuc2FjdGlvbnMuc3BsaXQoXCJcXG5cIik7XG5cblx0XHQvLyBBdWZ0ZWlsZW4gYWxsZXIgWmVpbGVuIGluIGFycmF5cyBtaXQgWmVpbGVuIGVpbmVzIE1vbmF0cy5cblx0XHRsZXQgbW9udGhzX21hcCA9IG5ldyBNYXA8c3RyaW5nLGFycmF5PigpO1xuXHRcdGxldCBpID0gMDtcblx0XHRsZXQgbW9udGg6c3RyaW5nO1xuXHRcdGZvciAobGV0IGkgPSAwO2k8YXJyX3RyYW5zYWN0aW9ucy5sZW5ndGg7aSsrKXtcblx0XHRcdGxldCBsaW5lID0gYXJyX3RyYW5zYWN0aW9uc1tpXTtcblx0XHRcdGlmIChsaW5lPT1cIlxcblwiIHx8IGxpbmU9PVwiXCIpe1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vIEZhbGxzIGVzIGVpbmUgXHUwMERDYmVyc2NocmlmdCBpc3QsIG5ldWVzIEVsZW1lbnQgaW0gRGljdCBhbmxlZ2VuLlxuXHRcdFx0aWYgKGxpbmUuaW5kZXhPZihcIiNcIikgIT0gLTEpe1xuXHRcdFx0XHRtb250aCA9IGxpbmU7XG5cdFx0XHRcdGxldCBhcnI6c3RyaW5nW10gPSBbXTtcblx0XHRcdFx0bW9udGhzX21hcC5zZXQobW9udGgsYXJyKTtcblx0XHRcdH1lbHNleyAvLyBBbnNvbnN0ZW4gZGllIFplaWxlbiBzYW1tZWxuLlxuXHRcdFx0XHRsZXQgYXJyOnN0cmluZ1tdID0gbW9udGhzX21hcC5nZXQobW9udGgpO1xuXHRcdFx0XHRhcnIucHVzaChsaW5lKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bGV0IGFsbF9uZXdMaW5lID0gXCJcIjtcblx0XHQvLyBBdXNyZWNobmVuIHVuZCBUYWJlbGxpZXJlbi5cblx0XHRtb250aHNfbWFwLmZvckVhY2goKGFyciwgbW9uKSA9PiB7XG5cdFx0XHRhbGxfbmV3TGluZSArPSBtb24gKyBcIlxcblxcblwiXG5cblx0XHRcdGxldCBwb3RzX3N1bXMgPSBbMCwwLDAsMCwwLDAsMF1cblxuXHRcdFx0Zm9yIChsZXQgaT0wO2k8YXJyLmxlbmd0aDtpKyspe1xuXHRcdFx0XHRsZXQgaXRlbSA9IGFycltpXS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdGxldCBpbmRleCA9IHBvdHMuaW5kZXhPZihpdGVtWzBdKTtcblx0XHRcdFx0aWYgKGluZGV4ID49IDApe1xuXHRcdFx0XHRcdHBvdHNfc3Vtc1tpbmRleF0gKz0gTnVtYmVyKGl0ZW1bMV0pO1xuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRhbGxfbmV3TGluZSArPSBcIllvdSBhcmUgdXNpbmcgbm9uLWV4aXN0ZW50IHBvdHMhIChcIitpdGVtWzBdK1wiKVxcblxcblwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRhYmVsbGllcmVuXG5cdFx0XHRwb3RzX3N1bXMgPSBwb3RzX3N1bXMubWFwKGZ1bmN0aW9uKGVhY2hfZWxlbWVudCl7XG4gICAgcmV0dXJuIE51bWJlcihlYWNoX2VsZW1lbnQudG9GaXhlZCgxKSk7fSk7XG5cdFx0XHRsZXQgZWZiID0gcG90c19zdW1zWzFdK3BvdHNfc3Vtc1syXStwb3RzX3N1bXNbMF07XG5cdFx0XHRsZXQgZWZicyA9IGVmYiArIHBvdHNfc3Vtc1s1XTtcblx0XHRcdGxldCBhbGwgPSBlZmJzICsgcG90c19zdW1zWzZdO1xuXHRcdFx0bGV0IG92ZXJhbGwgPSAocG90c19zdW1zWzRdLWFsbCkudG9GaXhlZCgxKTtcblx0XHRcdGxldCBvdmVyYWxsX3ZvcnplaWNoZW4gPSAob3ZlcmFsbCA8IDA/IFwiXCI6XCIrXCIpO1xuXHRcdFx0bGV0IGdlbGQgPSBOdW1iZXIocG90c19zdW1zWzNdKStOdW1iZXIob3ZlcmFsbCk7XG5cdFx0XHRsZXQgdGFiZWxsZTpzdHJpbmcgPSBcInxFaW5rYXVmfEZyZWl6ZWl0fEJlc29yZ3VuZ3xTb25zdGlnZXN8V2llZGVyaG9sdW5nfEluY29tZXxcXG58LS0tLS18LS0tLS0tfC0tLS0tfC0tLS0tfC0tLS0tfC0tLS0tfFxcbnxcIitwb3RzX3N1bXNbMV0rXCJ8XCIrcG90c19zdW1zWzJdK1wifFwiK3BvdHNfc3Vtc1swXStcInxcIitwb3RzX3N1bXNbNV0rXCJ8XCIrcG90c19zdW1zWzZdK1wifCtcIitwb3RzX3N1bXNbNF0rXCJ8XFxufCB8IHxcIitlZmIrXCJ8XCIrZWZicytcInxcIithbGwrXCJ8XCIrb3ZlcmFsbF92b3J6ZWljaGVuK292ZXJhbGwrXCJ8XFxufCB8IHwgfCB8IHxcIitnZWxkK1wifFwiXG5cdFx0XHQvLyBpbiBMZWRnZXIgTW9udGggdW5kIFRhYmVsbGUgaGluenVmXHUwMEZDZ2VuLlxuXHRcdFx0YWxsX25ld0xpbmUgKz0gdGFiZWxsZSArIFwiXFxuXCI7XG5cdFx0fSk7XG5cdFx0dGhpcy5hcHAudmF1bHQubW9kaWZ5KGRvY19sZWRnZXIsIGFsbF9uZXdMaW5lKTtcblx0fVxufVxuZnVuY3Rpb24gYnVja2V0c1RvRGljdChidWNrZXRzSW5wdXQpe1xuXHRsZXQgYnVja2V0czogYXJyYXkgPSBidWNrZXRzSW5wdXQuc3BsaXQoXCJcXG5cIik7XG5cdGxldCBkaWN0ID0ge307XG5cdGZvciAoY29uc3QgYiBvZiBidWNrZXRzKXtcblx0XHRpZiAoYiAhPSBcIlwiKXtcblx0XHRcdHNwbGl0ID0gYi5zcGxpdChcIjogXCIpO1xuXHRcdFx0ZGljdFtzcGxpdFswXV0gPSBzcGxpdFsxXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRpY3Q7XG59XG5mdW5jdGlvbiBkaWN0VG9CdWNrZXRzKGRpY3Qpe1xuXHRvdXQgPSBcIlwiXG5cdE9iamVjdC5lbnRyaWVzKGRpY3QpLmZvckVhY2goZnVuY3Rpb24oW2ssdl0pe1xuXHRcdG91dCArPSBrICsgXCI6IFwiICsgdiArXCJcXG5cIjtcblx0fSk7XG5cdHJldHVybiBvdXQ7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1MgPSB7XG5cdHRyYW5zYWN0aW9uX2ZpbGU6IFwiX3RyYW5zYWN0aW9ucy5tZFwiLFxuXHRsZWRnZXJfZmlsZTogXCJfbGVkZ2VyLm1kXCIsXG5cdGJ1Y2tldF9uYW1lczogeydnJzpcIkdlbGRcIiwnaSc6XCJJbmNvbWVcIiwndyc6XCJXaWVkZXJob2x1bmdcIiwnYic6XCJCZXNvcmd1bmdcIiwncyc6IFwiU29uc3RpZ2VzXCIsJ2YnOlwiRnJlaXplaXRcIiwnZSc6XCJFaW5rYXVmZW5cIn0sXG5cdHRhYmxlX29yZGVyOiAnZSxmLGIscyx3LGknLFxuXHR0YWJsZV9zdW1zOiB7J2UnOlwiZVwiLCdmJzpcImZcIiwnYic6XCJiLGUrZitiXCIsJ3MnOlwicyxlK2YrYitzXCIsJ3cnOlwidyxlK2YrYitzK3dcIiwnaSc6XCJpLGktZS1mLWItcy13LGcraS1lLWYtYi1zLXdcIn0sXG5cdGluY2x1ZGVfdHJhbnNhY3Rpb25zOiB0cnVlLFxufVxuXG5jbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYiBleHRlbmRzIG9ic2lkaWFuLlBsdWdpblNldHRpbmdUYWIge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBsdWdpbikge1xuICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblx0ZGlzcGxheSgpIHtcbiAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0Nyb25pZXYgQm9va2tlZXBpbmcgLSBTZXR0aW5ncycgfSk7XG4vLyBUT0RPOiBCZW51dHplIEZpbGVTdWdnZXN0IChUZW1wbGF0ZXIpXG5cdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIlRyYW5zYWN0aW9ucyBmaWxlXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgdGhlIHBhdGggdG8gdGhlIGZpbGUgeW91IHdhbnQgdG8gYWRkIHRoZSB0cmFuc2FjdGlvbnMgdG9cIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiX3RyYW5zYWN0aW9ucy5tZFwiKVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdfdHJhbnNhY3Rpb25zLm1kJztcblx0XHRcdH1cblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUgPSB2YWx1ZTtcblx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG4vLyBUT0RPOiBCZW51dHplIEZpbGVTdWdnZXN0IChUZW1wbGF0ZXIpXG5cdCAgbmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkxlZGdlciBmaWxlXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgdGhlIHBhdGggdG8gdGhlIGZpbGUgeW91IHdhbnQgdGhlIGxlZGdlciB0byBiZSBhZGRlZCB0b1wiKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJfbGVkZ2VyLm1kXCIpXG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGVkZ2VyX2ZpbGUpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdfbGVkZ2VyLm1kJztcblx0XHRcdH1cblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUgPSB2YWx1ZTtcblx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdCAgbmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkJ1Y2tldHNcIilcblx0XHRcdC5zZXREZXNjKFwiVHlwZSB0aGUgY2xhc3NpZmllciBhbmQgTmFtZSBvZiB0aGUgYnVja2V0cyB5b3Ugd2FudCB0byB1c2UsIG9uZSBidWNrZXQgcGVyIGxpbmVcIilcblx0XHRcdC5zZXRDbGFzcyhcImJvb2trZWVwaW5nLXRhbGwtZmllbGRcIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiaTogSW5jb21lXCIpXG5cdFx0XHQuc2V0VmFsdWUoZGljdFRvQnVja2V0cyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5idWNrZXRfbmFtZXMpKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5idWNrZXRfbmFtZXMgPSBidWNrZXRzVG9EaWN0KHZhbHVlKTtcblx0XHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fSkpKTtcblx0ICBuZXcgb2JzaWRpYW4uU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiQnVja2V0cyBPcmRlclwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBPcmRlciB0aGUgQnVja2V0cyBzaG91bGQgaGF2ZSBpbiB0aGUgdGFibGVcIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKCdlLGYsYixzLHcsaScpXG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudGFibGVfb3JkZXIpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdlLGYsYixzLHcsaSc7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJsZV9vcmRlciA9IHZhbHVlO1xuXHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fSkpKTtcblx0ICBuZXcgb2JzaWRpYW4uU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiU3VtcyBzaG93biBpbiB0YWJsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJUeXBlIHRoZSBTdW1zIHlvdSB3b3VsZCBsaWtlIHRvIGhhdmUgZGlzcGxheWVkIHVuZGVyIGVhY2ggQnVja2V0IGluIHRoZSBUYWJsZS4gT25lIEJ1Y2tldCBwZXIgcm93LlwiKVxuXHRcdFx0LnNldENsYXNzKFwiYm9va2tlZXBpbmctdGFsbC1maWVsZFwiKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ2I6IGIsZStmK2InKVxuXHRcdFx0LnNldFZhbHVlKGRpY3RUb0J1Y2tldHModGhpcy5wbHVnaW4uc2V0dGluZ3MudGFibGVfc3VtcykpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRhYmxlX3N1bXMgPSBidWNrZXRzVG9EaWN0KHZhbHVlKTtcblx0XHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fSkpKTtcblx0XHRuZXcgb2JzaWRpYW4uU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdFx0LnNldE5hbWUoXCJEaXNwbGF5IGV2ZXJ5IHRyYW5zYWN0aW9uXCIpXG5cdFx0XHRcdC5zZXREZXNjKFwiQWRkIGEgbGlzdCBvZiB0aGUgdHJhbnNhY3Rpb25zIHRvIHRoZSB0YWJsZS5cIilcblx0XHRcdFx0LmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVfdHJhbnNhY3Rpb25zKVxuXHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVfdHJhbnNhY3Rpb25zID0gIXRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVfdHJhbnNhY3Rpb25zO1xuXHRcdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNEY7QUFFNUYsSUFBSSxXQUFXLFFBQVE7QUFFdkIsSUFBcUIscUJBQXJCLGNBQWdELHVCQUFPO0FBQUEsRUFDdEQsY0FBYTtBQUNaLFVBQU0sR0FBRyxTQUFTO0FBQUEsRUFFbkI7QUFBQSxFQUVBLEFBQU0sU0FBUztBQUFBO0FBQ2QsYUFBTyxVQUFVLE1BQU0sUUFBUSxRQUFRLGFBQWE7QUFDbkQsZ0JBQVEsSUFBSSxzQ0FBc0M7QUFDbEQsY0FBTSxLQUFLLGFBQWE7QUFDeEIsYUFBSyxjQUFjLElBQUksOEJBQThCLEtBQUssS0FBSSxJQUFJLENBQUM7QUFFbkUsYUFBSyxXQUFXO0FBQUEsVUFDZixJQUFJO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixVQUFVLE1BQU07QUFDZixpQkFBSyxhQUFhO0FBQUEsVUFDbkI7QUFBQSxVQUNBLFNBQVM7QUFBQSxZQUNQO0FBQUEsY0FDRSxXQUFXLENBQUMsTUFBTTtBQUFBLGNBQ2xCLEtBQUs7QUFBQSxZQUNQO0FBQUEsVUFDRjtBQUFBLFFBQ0QsQ0FBQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBRUEsQUFBTSxXQUFXO0FBQUE7QUFDVixjQUFRLElBQUksd0NBQXdDO0FBQUEsSUFDM0Q7QUFBQTtBQUFBLEVBQ0EsZUFBZTtBQUNiLFdBQU8s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
