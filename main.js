/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CronievBookkeeping
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CronievBookkeeping = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Loading plugin CronievBookkeeping...");
      this.addCommand({
        id: "update-ledger",
        name: "Update Ledger",
        callback: () => {
          this.updateLedger();
        },
        hotkeys: [
          {
            modifiers: ["Ctrl"],
            key: "L"
          }
        ]
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      let pots = ["b", "e", "f", "g", "i", "s", "w"];
      let doc_transactions = this.app.vault.getAbstractFileByPath("_transactions.md");
      let doc_ledger = this.app.vault.getAbstractFileByPath("_ledger.md");
      const str_transactions = yield this.app.vault.read(doc_transactions);
      let arr_transactions = str_transactions.split("\n");
      let months_map = /* @__PURE__ */ new Map();
      let i = 0;
      let month;
      for (let i2 = 0; i2 < arr_transactions.length; i2++) {
        let line = arr_transactions[i2];
        if (line == "\n" || line == "") {
          continue;
        }
        if (line.indexOf("#") != -1) {
          month = line;
          let arr = [];
          months_map.set(month, arr);
        } else {
          let arr = months_map.get(month);
          arr.push(line);
        }
      }
      let all_newLine = "";
      months_map.forEach((arr, mon) => {
        all_newLine += mon + "\n\n";
        let pots_sums = [0, 0, 0, 0, 0, 0, 0];
        for (let i2 = 0; i2 < arr.length; i2++) {
          let item = arr[i2].split(" ");
          let index = pots.indexOf(item[0]);
          if (index >= 0) {
            pots_sums[index] += Number(item[1]);
          } else {
            all_newLine += "You are using non-existent pots! (" + item[0] + ")\n\n";
          }
        }
        pots_sums = pots_sums.map(function(each_element) {
          return Number(each_element.toFixed(1));
        });
        let efb = pots_sums[1] + pots_sums[2] + pots_sums[0];
        let efbs = efb + pots_sums[5];
        let all = efbs + pots_sums[6];
        let overall = (pots_sums[4] - all).toFixed(1);
        let overall_vorzeichen = overall < 0 ? "" : "+";
        let geld = Number(pots_sums[3]) + Number(overall);
        let tabelle = "|Einkauf|Freizeit|Besorgung|Sonstiges|Wiederholung|Income|\n|-----|------|-----|-----|-----|-----|\n|" + pots_sums[1] + "|" + pots_sums[2] + "|" + pots_sums[0] + "|" + pots_sums[5] + "|" + pots_sums[6] + "|+" + pots_sums[4] + "|\n| | |" + efb + "|" + efbs + "|" + all + "|" + overall_vorzeichen + overall + "|\n| | | | | |" + geld + "|";
        all_newLine += tabelle + "\n";
      });
      this.app.vault.modify(doc_ledger, all_newLine);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmcgZXh0ZW5kcyBQbHVnaW4ge1xuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cdFx0Ly8gY29uc3QgcG90c19uYW1lcyA9IFtcIkJlc29yZ3VuZ1wiLFwiRWlua2F1ZlwiLFwiRnJlaVwiLFwiR2VsZFwiLFwiSW50YWtlXCIsXCJTb25zdGlnZXNcIixcIldpZWRlcmhvbHVuZ1wiXVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHQgIGNvbnNvbGUubG9nKCdMb2FkaW5nIHBsdWdpbiBDcm9uaWV2Qm9va2tlZXBpbmcuLi4nKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCB0aGF0IGNhbiBwZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG9uIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ3VwZGF0ZS1sZWRnZXInLFxuXHRcdFx0bmFtZTogJ1VwZGF0ZSBMZWRnZXInLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dGhpcy51cGRhdGVMZWRnZXIoKTtcblx0XHRcdH0sXG5cdFx0XHRob3RrZXlzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRtb2RpZmllcnM6IFsnQ3RybCddLFxuXHRcdFx0XHRcdFx0XHRrZXk6ICdMJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XVxuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgcGx1Z2luIENyb25pZXZCb29ra2VlcGluZy4uLicpO1xuXHR9XG5cblx0YXN5bmMgdXBkYXRlTGVkZ2VyKCl7XG5cdFx0bGV0IHBvdHMgPSBbXCJiXCIsXCJlXCIsXCJmXCIsXCJnXCIsXCJpXCIsXCJzXCIsXCJ3XCJdO1xuXHRcdGxldCBkb2NfdHJhbnNhY3Rpb25zID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFwiX3RyYW5zYWN0aW9ucy5tZFwiKTtcblx0XHRsZXQgZG9jX2xlZGdlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChcIl9sZWRnZXIubWRcIik7XG5cdFx0Y29uc3Qgc3RyX3RyYW5zYWN0aW9ucyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZG9jX3RyYW5zYWN0aW9ucyk7XG5cdFx0bGV0IGFycl90cmFuc2FjdGlvbnM6IGFycmF5ID0gc3RyX3RyYW5zYWN0aW9ucy5zcGxpdChcIlxcblwiKTtcblxuXHRcdC8vIEF1ZnRlaWxlbiBhbGxlciBaZWlsZW4gaW4gYXJyYXlzIG1pdCBaZWlsZW4gZWluZXMgTW9uYXRzLlxuXHRcdGxldCBtb250aHNfbWFwID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdFx0bGV0IGkgPSAwO1xuXHRcdGxldCBtb250aDpzdHJpbmc7XG5cdFx0Zm9yIChsZXQgaSA9IDA7aTxhcnJfdHJhbnNhY3Rpb25zLmxlbmd0aDtpKyspe1xuXHRcdFx0bGV0IGxpbmUgPSBhcnJfdHJhbnNhY3Rpb25zW2ldO1xuXHRcdFx0aWYgKGxpbmU9PVwiXFxuXCIgfHwgbGluZT09XCJcIil7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRmFsbHMgZXMgZWluZSBcdTAwRENiZXJzY2hyaWZ0IGlzdCwgbmV1ZXMgRWxlbWVudCBpbSBEaWN0IGFubGVnZW4uXG5cdFx0XHRpZiAobGluZS5pbmRleE9mKFwiI1wiKSAhPSAtMSl7XG5cdFx0XHRcdG1vbnRoID0gbGluZTtcblx0XHRcdFx0bGV0IGFycjpzdHJpbmdbXSA9IFtdO1xuXHRcdFx0XHRtb250aHNfbWFwLnNldChtb250aCxhcnIpO1xuXHRcdFx0fWVsc2V7IC8vIEFuc29uc3RlbiBkaWUgWmVpbGVuIHNhbW1lbG4uXG5cdFx0XHRcdGxldCBhcnI6c3RyaW5nW10gPSBtb250aHNfbWFwLmdldChtb250aCk7XG5cdFx0XHRcdGFyci5wdXNoKGxpbmUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRsZXQgYWxsX25ld0xpbmUgPSBcIlwiO1xuXHRcdC8vIEF1c3JlY2huZW4gdW5kIFRhYmVsbGllcmVuLlxuXHRcdG1vbnRoc19tYXAuZm9yRWFjaCgoYXJyLCBtb24pID0+IHtcblx0XHRcdGFsbF9uZXdMaW5lICs9IG1vbiArIFwiXFxuXFxuXCJcblxuXHRcdFx0bGV0IHBvdHNfc3VtcyA9IFswLDAsMCwwLDAsMCwwXVxuXG5cdFx0XHRmb3IgKGxldCBpPTA7aTxhcnIubGVuZ3RoO2krKyl7XG5cdFx0XHRcdGxldCBpdGVtID0gYXJyW2ldLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0bGV0IGluZGV4ID0gcG90cy5pbmRleE9mKGl0ZW1bMF0pO1xuXHRcdFx0XHRpZiAoaW5kZXggPj0gMCl7XG5cdFx0XHRcdFx0cG90c19zdW1zW2luZGV4XSArPSBOdW1iZXIoaXRlbVsxXSk7XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdGFsbF9uZXdMaW5lICs9IFwiWW91IGFyZSB1c2luZyBub24tZXhpc3RlbnQgcG90cyEgKFwiK2l0ZW1bMF0rXCIpXFxuXFxuXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFiZWxsaWVyZW5cblx0XHRcdHBvdHNfc3VtcyA9IHBvdHNfc3Vtcy5tYXAoZnVuY3Rpb24oZWFjaF9lbGVtZW50KXtcbiAgICByZXR1cm4gTnVtYmVyKGVhY2hfZWxlbWVudC50b0ZpeGVkKDEpKTt9KTtcblx0XHRcdGxldCBlZmIgPSBwb3RzX3N1bXNbMV0rcG90c19zdW1zWzJdK3BvdHNfc3Vtc1swXTtcblx0XHRcdGxldCBlZmJzID0gZWZiICsgcG90c19zdW1zWzVdO1xuXHRcdFx0bGV0IGFsbCA9IGVmYnMgKyBwb3RzX3N1bXNbNl07XG5cdFx0XHRsZXQgb3ZlcmFsbCA9IChwb3RzX3N1bXNbNF0tYWxsKS50b0ZpeGVkKDEpO1xuXHRcdFx0bGV0IG92ZXJhbGxfdm9yemVpY2hlbiA9IChvdmVyYWxsIDwgMD8gXCJcIjpcIitcIik7XG5cdFx0XHRsZXQgZ2VsZCA9IE51bWJlcihwb3RzX3N1bXNbM10pK051bWJlcihvdmVyYWxsKTtcblx0XHRcdGxldCB0YWJlbGxlOnN0cmluZyA9IFwifEVpbmthdWZ8RnJlaXplaXR8QmVzb3JndW5nfFNvbnN0aWdlc3xXaWVkZXJob2x1bmd8SW5jb21lfFxcbnwtLS0tLXwtLS0tLS18LS0tLS18LS0tLS18LS0tLS18LS0tLS18XFxufFwiK3BvdHNfc3Vtc1sxXStcInxcIitwb3RzX3N1bXNbMl0rXCJ8XCIrcG90c19zdW1zWzBdK1wifFwiK3BvdHNfc3Vtc1s1XStcInxcIitwb3RzX3N1bXNbNl0rXCJ8K1wiK3BvdHNfc3Vtc1s0XStcInxcXG58IHwgfFwiK2VmYitcInxcIitlZmJzK1wifFwiK2FsbCtcInxcIitvdmVyYWxsX3ZvcnplaWNoZW4rb3ZlcmFsbCtcInxcXG58IHwgfCB8IHwgfFwiK2dlbGQrXCJ8XCJcblx0XHRcdC8vIGluIExlZGdlciBNb250aCB1bmQgVGFiZWxsZSBoaW56dWZcdTAwRkNnZW4uXG5cdFx0XHRhbGxfbmV3TGluZSArPSB0YWJlbGxlICsgXCJcXG5cIjtcblx0XHR9KTtcblx0XHR0aGlzLmFwcC52YXVsdC5tb2RpZnkoZG9jX2xlZGdlciwgYWxsX25ld0xpbmUpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNEY7QUFFNUYsSUFBcUIscUJBQXJCLGNBQWdELHVCQUFPO0FBQUEsRUFDdEQsY0FBYTtBQUNaLFVBQU0sR0FBRyxTQUFTO0FBQUEsRUFFbkI7QUFBQSxFQUVBLEFBQU0sU0FBUztBQUFBO0FBQ2IsY0FBUSxJQUFJLHNDQUFzQztBQUduRCxXQUFLLFdBQVc7QUFBQSxRQUNmLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLFVBQVUsTUFBTTtBQUNmLGVBQUssYUFBYTtBQUFBLFFBQ25CO0FBQUEsUUFDQSxTQUFTO0FBQUEsVUFDUDtBQUFBLFlBQ0UsV0FBVyxDQUFDLE1BQU07QUFBQSxZQUNsQixLQUFLO0FBQUEsVUFDUDtBQUFBLFFBQ0Y7QUFBQSxNQUNELENBQUM7QUFBQSxJQUNGO0FBQUE7QUFBQSxFQUVBLEFBQU0sV0FBVztBQUFBO0FBQ1YsY0FBUSxJQUFJLHdDQUF3QztBQUFBLElBQzNEO0FBQUE7QUFBQSxFQUVBLEFBQU0sZUFBYztBQUFBO0FBQ25CLFVBQUksT0FBTyxDQUFDLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEdBQUc7QUFDdkMsVUFBSSxtQkFBbUIsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLGtCQUFrQjtBQUM5RSxVQUFJLGFBQWEsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFlBQVk7QUFDbEUsWUFBTSxtQkFBbUIsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLGdCQUFnQjtBQUNuRSxVQUFJLG1CQUEwQixpQkFBaUIsTUFBTSxJQUFJO0FBR3pELFVBQUksYUFBYSxvQkFBSSxJQUFrQjtBQUN2QyxVQUFJLElBQUk7QUFDUixVQUFJO0FBQ0osZUFBUyxLQUFJLEdBQUUsS0FBRSxpQkFBaUIsUUFBTyxNQUFJO0FBQzVDLFlBQUksT0FBTyxpQkFBaUI7QUFDNUIsWUFBSSxRQUFNLFFBQVEsUUFBTSxJQUFHO0FBQzFCO0FBQUEsUUFDRDtBQUVBLFlBQUksS0FBSyxRQUFRLEdBQUcsS0FBSyxJQUFHO0FBQzNCLGtCQUFRO0FBQ1IsY0FBSSxNQUFlLENBQUM7QUFDcEIscUJBQVcsSUFBSSxPQUFNLEdBQUc7QUFBQSxRQUN6QixPQUFLO0FBQ0osY0FBSSxNQUFlLFdBQVcsSUFBSSxLQUFLO0FBQ3ZDLGNBQUksS0FBSyxJQUFJO0FBQUEsUUFDZDtBQUFBLE1BQ0Q7QUFDQSxVQUFJLGNBQWM7QUFFbEIsaUJBQVcsUUFBUSxDQUFDLEtBQUssUUFBUTtBQUNoQyx1QkFBZSxNQUFNO0FBRXJCLFlBQUksWUFBWSxDQUFDLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFFOUIsaUJBQVMsS0FBRSxHQUFFLEtBQUUsSUFBSSxRQUFPLE1BQUk7QUFDN0IsY0FBSSxPQUFPLElBQUksSUFBRyxNQUFNLEdBQUc7QUFDM0IsY0FBSSxRQUFRLEtBQUssUUFBUSxLQUFLLEVBQUU7QUFDaEMsY0FBSSxTQUFTLEdBQUU7QUFDZCxzQkFBVSxVQUFVLE9BQU8sS0FBSyxFQUFFO0FBQUEsVUFDbkMsT0FBSztBQUNKLDJCQUFlLHVDQUFxQyxLQUFLLEtBQUc7QUFBQSxVQUM3RDtBQUFBLFFBQ0Q7QUFHQSxvQkFBWSxVQUFVLElBQUksU0FBUyxjQUFhO0FBQy9DLGlCQUFPLE9BQU8sYUFBYSxRQUFRLENBQUMsQ0FBQztBQUFBLFFBQUUsQ0FBQztBQUN6QyxZQUFJLE1BQU0sVUFBVSxLQUFHLFVBQVUsS0FBRyxVQUFVO0FBQzlDLFlBQUksT0FBTyxNQUFNLFVBQVU7QUFDM0IsWUFBSSxNQUFNLE9BQU8sVUFBVTtBQUMzQixZQUFJLFVBQVcsV0FBVSxLQUFHLEtBQUssUUFBUSxDQUFDO0FBQzFDLFlBQUkscUJBQXNCLFVBQVUsSUFBRyxLQUFHO0FBQzFDLFlBQUksT0FBTyxPQUFPLFVBQVUsRUFBRSxJQUFFLE9BQU8sT0FBTztBQUM5QyxZQUFJLFVBQWlCLDBHQUF3RyxVQUFVLEtBQUcsTUFBSSxVQUFVLEtBQUcsTUFBSSxVQUFVLEtBQUcsTUFBSSxVQUFVLEtBQUcsTUFBSSxVQUFVLEtBQUcsT0FBSyxVQUFVLEtBQUcsYUFBVyxNQUFJLE1BQUksT0FBSyxNQUFJLE1BQUksTUFBSSxxQkFBbUIsVUFBUSxtQkFBaUIsT0FBSztBQUVyVCx1QkFBZSxVQUFVO0FBQUEsTUFDMUIsQ0FBQztBQUNELFdBQUssSUFBSSxNQUFNLE9BQU8sWUFBWSxXQUFXO0FBQUEsSUFDOUM7QUFBQTtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
