/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var obsidian = require("obsidian");
var CronievBookkeeping = class extends obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      return __awaiter(this, void 0, void 0, function* () {
        console.log("Loading plugin CronievBookkeeping...");
        yield this.loadSettings();
        this.addSettingTab(new CronievBookkeepingSettingsTab(this.app, this));
        this.addCommand({
          id: "update-ledger",
          name: "Update Ledger",
          callback: () => {
            this.updateLedger();
          },
          hotkeys: [
            {
              modifiers: ["Ctrl"],
              key: "L"
            }
          ]
        });
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      let doc_ledger = this.app.vault.getAbstractFileByPath(this.settings.ledger_file);
      const str_transactions = yield this.app.vault.read(this.app.vault.getAbstractFileByPath(this.settings.transaction_file));
      let months_map = makeMonthsMap(str_transactions.split("\n"));
      let new_doc = "";
      let buckets_list = this.settings.table_order.split(",");
      let table_head = makeTableHead(buckets_list, this.settings.bucket_names);
      let empty_row = makeEmptyTableRow(buckets_list.length);
      let sorted_buckets = /* @__PURE__ */ new Map();
      Object.entries(this.settings.bucket_names).forEach(function([k, v]) {
        sorted_buckets.set(k, []);
      });
      months_map.forEach((arr, mon) => {
        let sorted_buckets_mon = new Map(JSON.parse(JSON.stringify(Array.from(sorted_buckets))));
        sortTransactions(sorted_buckets_mon, arr);
        let sum_entries = makeSumEntries(sumBuckets(sorted_buckets_mon), this.settings.table_sums);
        new_doc += mon + "\n" + table_head;
        if (this.settings.include_transactions) {
          new_doc += makeTableFromMap(buckets_list, stringifyTransactionMap(sorted_buckets_mon));
        }
        new_doc += empty_row;
        new_doc += makeTableFromMap(buckets_list, sum_entries);
      });
      this.app.vault.modify(doc_ledger, new_doc);
    });
  }
};
function makeMonthsMap(arr_transactions) {
  let months_map = /* @__PURE__ */ new Map();
  let month;
  for (const line of arr_transactions) {
    if (line == "\n" || line == "") {
      continue;
    }
    if (line.indexOf("#") != -1) {
      month = line;
      let arr = [];
      months_map.set(month, arr);
    } else {
      let arr = months_map.get(month);
      arr.push(line);
    }
  }
  return months_map;
}
function makeTableHead(buckets, bucket_names) {
  let table_head = "|";
  let table_head2 = "|";
  for (const b of buckets) {
    table_head += bucket_names[b] + "|";
    table_head2 += " --- |";
  }
  return table_head + "\n" + table_head2 + "\n";
}
function sortTransactions(map, arr) {
  for (const t of arr) {
    let split2 = makeTransaction(t);
    map.get(split2[0]).push(split2.slice(1));
  }
}
function makeTransaction(t) {
  let split2 = t.split(" ");
  let desc = split2.slice(2).join(" ");
  return [split2[0], split2[1], desc];
}
function sumBuckets(map) {
  let sums = /* @__PURE__ */ new Map();
  map.forEach((ts, b) => {
    let sum = 0;
    for (const t of ts) {
      sum += parseFloat(t);
    }
    sums.set(b, parseFloat(sum));
  });
  return sums;
}
function makeSumEntries(sums, table_sums) {
  let sum_entries = /* @__PURE__ */ new Map();
  Object.entries(table_sums).forEach(function([k, v]) {
    sum_entries.set(k, []);
    let combinations = v.split(",");
    for (const s of combinations) {
      let vorzeichen = 1;
      let tmp = 0;
      for (const c of s) {
        if (c == "+") {
          vorzeichen = 1;
        } else if (c == "-") {
          vorzeichen = -1;
        } else {
          tmp += vorzeichen * parseFloat(sums.get(c));
        }
      }
      sum_entries.get(k).push(tmp);
    }
  });
  return sum_entries;
}
function makeEmptyTableRow(len) {
  let row = "|";
  for (let i = 0; i < len; i++) {
    row += " |";
  }
  return row + "\n";
}
function stringifyTransactionMap(map) {
  let new_map = /* @__PURE__ */ new Map();
  map.forEach((v, k) => {
    let list = [];
    for (const element of v) {
      list.push(element.join(" "));
    }
    new_map.set(k, list);
  });
  return new_map;
}
function makeTableFromMap(buckets, map) {
  let exhausted = [];
  let table = "";
  let row = 0;
  buckets.forEach((element) => {
    exhausted.push(0);
  });
  while (exhausted.includes(0)) {
    table += "|";
    for (let i = 0; i < buckets.length; i++) {
      if (exhausted[i] == 0) {
        let map_el = map.get(buckets[i]);
        if (map_el[row] != void 0) {
          table += map_el[row];
        }
        if (map_el.length <= row + 1) {
          exhausted[i] = 1;
        }
      }
      table += " |";
    }
    table += "\n";
    row++;
  }
  return table;
}
function bucketsToDict(bucketsInput) {
  let buckets = bucketsInput.split("\n");
  let dict = {};
  for (const b of buckets) {
    if (b != "") {
      split = b.split(": ");
      dict[split[0]] = split[1];
    }
  }
  return dict;
}
function dictToBuckets(dict) {
  out = "";
  Object.entries(dict).forEach(function([k, v]) {
    out += k + ": " + v + "\n";
  });
  return out;
}
var DEFAULT_SETTINGS = {
  transaction_file: "_transactions.md",
  ledger_file: "_ledger.md",
  bucket_names: { "g": "Geld", "i": "Income", "w": "Wiederholung", "b": "Besorgung", "s": "Sonstiges", "f": "Freizeit", "e": "Einkaufen" },
  table_order: "e,f,b,s,w,i",
  table_sums: { "e": "e", "f": "f", "b": "b,e+f+b", "s": "s,e+f+b+s", "w": "w,e+f+b+s+w", "i": "i,i-e-f-b-s-w,g+i-e-f-b-s-w" },
  include_transactions: true
};
var CronievBookkeepingSettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Bookkeeping - Settings" });
    new obsidian.Setting(containerEl).setName("Transactions file").setDesc("Type the path to the file you want to add the transactions to").addTextArea((text) => text.setPlaceholder("_transactions.md").setValue(this.plugin.settings.transaction_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_transactions.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Ledger file").setDesc("Type the path to the file you want the ledger to be added to").addTextArea((text) => text.setPlaceholder("_ledger.md").setValue(this.plugin.settings.ledger_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_ledger.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets").setDesc("Type the classifier and Name of the buckets you want to use, one bucket per line").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("i: Income").setValue(dictToBuckets(this.plugin.settings.bucket_names)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.bucket_names = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets Order").setDesc("Type the Order the Buckets should have in the table").addTextArea((text) => text.setPlaceholder("e,f,b,s,w,i").setValue(this.plugin.settings.table_order).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "e,f,b,s,w,i";
      }
      this.plugin.settings.table_order = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Sums shown in table").setDesc("Type the Sums you would like to have displayed under each Bucket in the Table. One Bucket per row.").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("b: b,e+f+b").setValue(dictToBuckets(this.plugin.settings.table_sums)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.table_sums = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display every transaction").setDesc("Add a list of the transactions to the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_transactions).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_transactions = !this.plugin.settings.include_transactions;
      yield this.plugin.saveSettings();
    })));
  }
};
module.exports = CronievBookkeeping;
//# sourceMappingURL=data:application/json;base64,
