/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var obsidian = require("obsidian");
var CronievBookkeeping = class extends obsidian.Plugin {
  constructor() {
    super(...arguments);
  }
  onload() {
    return __async(this, null, function* () {
      return __awaiter(this, void 0, void 0, function* () {
        console.log("Loading plugin CronievBookkeeping...");
        yield this.loadSettings();
        this.addSettingTab(new CronievBookkeepingSettingsTab(this.app, this));
        yield this.saveSettings();
        this.addCommand({
          id: "update-ledger",
          name: "Update Ledger",
          callback: () => {
            this.updateLedger();
          },
          hotkeys: [
            {
              modifiers: ["Ctrl"],
              key: "L"
            }
          ]
        });
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin CronievBookkeeping...");
    });
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateLedger() {
    return __async(this, null, function* () {
      let doc_ledger = this.app.vault.getAbstractFileByPath(this.settings.ledger_file);
      const str_transactions = yield this.app.vault.read(this.app.vault.getAbstractFileByPath(this.settings.transaction_file));
      let months_map = makeMonthsMap(str_transactions.split("\n"));
      let new_doc = "";
      let buckets_list = Object.keys(this.settings.table_sums);
      let table_head = makeTableHead(buckets_list, this.settings.bucket_names);
      let empty_row = makeEmptyTableRow(buckets_list.length);
      let sorted_buckets = /* @__PURE__ */ new Map();
      Object.entries(this.settings.bucket_names).forEach(function([k, v]) {
        sorted_buckets.set(k, []);
      });
      months_map.forEach((arr, mon) => {
        let sorted_buckets_mon = new Map(JSON.parse(JSON.stringify(Array.from(sorted_buckets))));
        sortTransactions(sorted_buckets_mon, arr);
        let buckets_sums = sumBuckets(sorted_buckets_mon);
        let sum_entries = makeSumEntries(buckets_sums, this.settings.table_sums);
        new_doc += mon + "\n" + table_head;
        if (this.settings.include_transactions) {
          new_doc += makeTableFromMap(buckets_list, stringifyAndReverseTransactionMap(sorted_buckets_mon));
          new_doc += empty_row;
        }
        new_doc += makeTableFromMap(buckets_list, sum_entries);
        if (this.settings.include_piechart) {
          new_doc += makePiechartFromMap(this.settings.piechart_buckets, buckets_sums, this.settings.bucket_names);
        }
      });
      this.app.vault.modify(doc_ledger, new_doc);
    });
  }
};
function makeMonthsMap(arr_transactions) {
  let months_map = /* @__PURE__ */ new Map();
  let month;
  for (const line of arr_transactions) {
    if (line == "\n" || line == "") {
      continue;
    }
    if (line.indexOf("#") != -1) {
      month = line;
      let arr = [];
      months_map.set(month, arr);
    } else {
      let arr = months_map.get(month);
      arr.push(line);
    }
  }
  return months_map;
}
function makeTableHead(buckets, bucket_names) {
  let table_head = "|";
  let table_head2 = "|";
  for (const b of buckets) {
    table_head += bucket_names[b] + "|";
    table_head2 += " --- |";
  }
  return table_head + "\n" + table_head2 + "\n";
}
function sortTransactions(map, arr) {
  for (const t of arr) {
    let split2 = makeTransaction(t);
    map.get(split2[0]).push(split2.slice(1));
  }
}
function makeTransaction(t) {
  let split2 = t.split(" ");
  let desc = split2.slice(2).join(" ");
  return [split2[0], split2[1], desc];
}
function sumBuckets(map) {
  let sums = /* @__PURE__ */ new Map();
  map.forEach((ts, b) => {
    let sum = 0;
    for (const t of ts) {
      sum += parseFloat(t);
    }
    sums.set(b, sum.toFixed(2));
  });
  return sums;
}
function makeSumEntries(sums, table_sums) {
  let sum_entries = /* @__PURE__ */ new Map();
  Object.entries(table_sums).forEach(function([k, v]) {
    sum_entries.set(k, []);
    let combinations = v.split(",");
    for (var s of combinations) {
      let vorzeichen = 1;
      let tmp = 0;
      let strVz = s[0];
      for (const c of s.slice(1)) {
        if (c == "+") {
          vorzeichen = 1;
        } else if (c == "-") {
          vorzeichen = -1;
        } else {
          tmp += vorzeichen * parseFloat(sums.get(c));
        }
      }
      switch (strVz) {
        case "+":
          if (tmp < 0) {
            strVz = "";
          }
          break;
        case "-":
          if (tmp < 0) {
            strVz = "+";
          } else {
            strVz = "";
          }
          tmp *= -1;
          break;
        case "0":
          strVz = "";
          break;
      }
      sum_entries.get(k).push(strVz + tmp.toFixed(2));
    }
  });
  return sum_entries;
}
function makeEmptyTableRow(len) {
  let row = "|";
  for (let i = 0; i < len; i++) {
    row += " |";
  }
  return row + "\n";
}
function stringifyAndReverseTransactionMap(map) {
  let new_map = /* @__PURE__ */ new Map();
  map.forEach((v, k) => {
    let list = [];
    for (const element of v) {
      list.push(element.join(" "));
    }
    new_map.set(k, list.reverse());
  });
  return new_map;
}
function makeTableFromMap(buckets, map) {
  let exhausted = [];
  let table = "";
  let row = 0;
  buckets.forEach((element) => {
    exhausted.push(0);
  });
  while (exhausted.includes(0)) {
    table += "|";
    for (let i = 0; i < buckets.length; i++) {
      if (exhausted[i] == 0) {
        let map_el = map.get(buckets[i]);
        if (map_el[row] != void 0) {
          table += map_el[row];
        }
        if (map_el.length <= row + 1) {
          exhausted[i] = 1;
        }
      }
      table += " |";
    }
    table += "\n";
    row++;
  }
  return table;
}
function makePiechartFromMap(buckets, map, names) {
  result = ">[!info]- Piechart\n> ```mermaid\n> pie\n";
  for (const b of buckets) {
    result += '> "' + names[b] + '":' + map.get(b) + "\n";
  }
  result += "> ```\n\n";
  return result;
}
function bucketsToDict(bucketsInput) {
  let buckets = bucketsInput.split("\n");
  let dict = {};
  for (const b of buckets) {
    if (b != "") {
      split = b.split(": ");
      dict[split[0]] = split[1];
    }
  }
  return dict;
}
function dictToBuckets(dict) {
  out = "";
  Object.entries(dict).forEach(function([k, v]) {
    out += k + ": " + v + "\n";
  });
  return out;
}
var DEFAULT_SETTINGS = {
  transaction_file: "_transactions.md",
  ledger_file: "_ledger.md",
  bucket_names: { "g": "Geld", "i": "Income", "w": "Wiederholung", "b": "Besorgung", "s": "Sonstiges", "f": "Freizeit", "e": "Einkaufen" },
  table_sums: { "e": "e", "f": "f", "b": "b,e+f+b", "s": "s,e+f+b+s", "w": "w,e+f+b+s+w", "i": "i,i-e-f-b-s-w,g+i-e-f-b-s-w" },
  include_transactions: true,
  include_piechart: false,
  piechart_buckets: ["e", "f", "b", "s", "w"]
};
var CronievBookkeepingSettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Croniev Bookkeeping - Settings" });
    new obsidian.Setting(containerEl).setName("Transactions File").setDesc("Type the path to the file you want to add the transactions to").addTextArea((text) => text.setPlaceholder("_transactions.md").setValue(this.plugin.settings.transaction_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_transactions.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Ledger File").setDesc("Type the path to the file you want the ledger to be added to").addTextArea((text) => text.setPlaceholder("_ledger.md").setValue(this.plugin.settings.ledger_file).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      if (value == "") {
        value = "_ledger.md";
      }
      this.plugin.settings.transaction_file = value;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Buckets").setDesc("Type the classifier and Name of the buckets you want to use, one bucket per line").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("i: Income").setValue(dictToBuckets(this.plugin.settings.bucket_names)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.bucket_names = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Sums Shown in Table").setDesc("In the order that the buckets should appear in the table add (one row for each bucket) which sum combinations should be shown at the bottom of the table. Only '+' and '-' are supported.\nEach combination should start with one of the following Symbols: '+' to show the sign of the sum, '-' to show the opposite of the sign, and '0' to not show positive signs.").setClass("bookkeeping-tall-field").addTextArea((text) => text.setPlaceholder("b: b,b+e,e+f+b").setValue(dictToBuckets(this.plugin.settings.table_sums)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.table_sums = bucketsToDict(value);
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display Transactions in Table").setDesc("Add a list of the transactions to the table.").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_transactions).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_transactions = !this.plugin.settings.include_transactions;
      yield this.plugin.saveSettings();
    })));
    new obsidian.Setting(containerEl).setName("Display piechart for each month").addToggle((toggle) => toggle.setValue(this.plugin.settings.include_piechart).onChange((value) => __awaiter(this, void 0, void 0, function* () {
      this.plugin.settings.include_piechart = !this.plugin.settings.include_piechart;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.include_piechart) {
      new obsidian.Setting(containerEl).setName("Buckets to display in piechart").setDesc("Separated by comma.").addTextArea((text) => text.setValue(this.plugin.settings.piechart_buckets.join(",")).onChange((value) => __awaiter(this, void 0, void 0, function* () {
        this.plugin.settings.piechart_buckets = value.split(",");
        yield this.plugin.saveSettings();
      })));
    }
  }
};
module.exports = CronievBookkeeping;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG52YXIgb2JzaWRpYW4gPSByZXF1aXJlKCdvYnNpZGlhbicpO1xuXG5jbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmcgZXh0ZW5kcyBvYnNpZGlhbi5QbHVnaW4ge1xuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cdFx0Ly8gY29uc3QgcG90c19uYW1lcyA9IFtcIkJlc29yZ3VuZ1wiLFwiRWlua2F1ZlwiLFwiRnJlaVwiLFwiR2VsZFwiLFwiSW50YWtlXCIsXCJTb25zdGlnZXNcIixcIldpZWRlcmhvbHVuZ1wiXVxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTG9hZGluZyBwbHVnaW4gQ3JvbmlldkJvb2trZWVwaW5nLi4uJyk7XG5cdFx0XHR5aWVsZCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYih0aGlzLmFwcCx0aGlzKSk7XG5cdFx0XHR5aWVsZCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ3VwZGF0ZS1sZWRnZXInLFxuXHRcdFx0XHRuYW1lOiAnVXBkYXRlIExlZGdlcicsXG5cdFx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVMZWRnZXIoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0aG90a2V5czogW1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdG1vZGlmaWVyczogWydDdHJsJ10sXG5cdFx0XHRcdFx0XHRcdFx0a2V5OiAnTCcsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIG9udW5sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnVW5sb2FkaW5nIHBsdWdpbiBDcm9uaWV2Qm9va2tlZXBpbmcuLi4nKTtcblx0fVxuXHRsb2FkU2V0dGluZ3MoKSB7XG5cdFx0XHRyZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCB5aWVsZCB0aGlzLmxvYWREYXRhKCkpO1xuXHRcdFx0fSk7XG5cdH1cblx0c2F2ZVNldHRpbmdzKCkge1xuXHRcdFx0cmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0XHR5aWVsZCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRhc3luYyB1cGRhdGVMZWRnZXIoKXtcblx0XHRsZXQgZG9jX2xlZGdlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0aGlzLnNldHRpbmdzLmxlZGdlcl9maWxlKTtcblx0XHRjb25zdCBzdHJfdHJhbnNhY3Rpb25zID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZCh0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy50cmFuc2FjdGlvbl9maWxlKSk7XG5cblx0XHQvLyBBdWZ0ZWlsZW4gYWxsZXIgWmVpbGVuIGluIGFycmF5cyBtaXQgWmVpbGVuIGVpbmVzIE1vbmF0cy5cblx0XHRsZXQgbW9udGhzX21hcCA9IG1ha2VNb250aHNNYXAoc3RyX3RyYW5zYWN0aW9ucy5zcGxpdChcIlxcblwiKSk7XG5cdFx0Ly8gQWxsZSBUYWJlbGxlbiB1bmQgXHUwMERDYmVyc2NocmlmdGVuIHdlcmRlbiBpbiBlaW5lciBTdHJpbmcgZ2VzYW1tZWx0XG5cdFx0bGV0IG5ld19kb2MgPSBcIlwiO1xuXHRcdC8vIFRhYmVsbGVua1x1MDBGNnBmZVxuXHRcdGxldCBidWNrZXRzX2xpc3QgPSBPYmplY3Qua2V5cyh0aGlzLnNldHRpbmdzLnRhYmxlX3N1bXMpO1xuXHRcdGxldCB0YWJsZV9oZWFkID0gbWFrZVRhYmxlSGVhZChidWNrZXRzX2xpc3QsIHRoaXMuc2V0dGluZ3MuYnVja2V0X25hbWVzKTtcblx0XHRsZXQgZW1wdHlfcm93ID0gbWFrZUVtcHR5VGFibGVSb3coYnVja2V0c19saXN0Lmxlbmd0aCk7XG5cdFx0Ly8gVm9ybGFnZSBmXHUwMEZDciBTb3J0aWVydW5nXG5cdFx0bGV0IHNvcnRlZF9idWNrZXRzID0gbmV3IE1hcDxzdHJpbmcsYXJyYXk+KCk7XG5cdFx0T2JqZWN0LmVudHJpZXModGhpcy5zZXR0aW5ncy5idWNrZXRfbmFtZXMpLmZvckVhY2goZnVuY3Rpb24oW2ssdl0pIHtcblx0XHRcdHNvcnRlZF9idWNrZXRzLnNldChrLFtdKVxuXHRcdH0pO1xuXHRcdC8vIEZcdTAwRkNyIGplZGVuIE1vbmF0IFRhYmVsbGUgYW5sZWdlblxuXHRcdG1vbnRoc19tYXAuZm9yRWFjaCgoYXJyLG1vbikgPT4ge1xuXHRcdFx0Ly8gRWludHJcdTAwRTRnZSBuYWNoIEJ1Y2tldHMgc29ydGllcmVuXG5cdFx0XHRsZXQgc29ydGVkX2J1Y2tldHNfbW9uID0gbmV3IE1hcChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oc29ydGVkX2J1Y2tldHMpKSkpO1xuXHRcdFx0c29ydFRyYW5zYWN0aW9ucyhzb3J0ZWRfYnVja2V0c19tb24sYXJyKTtcblx0XHRcdC8vIHNldHRpbmdzLlRhYmxlX3N1bXMgZXJyZWNobmVuXG5cdFx0XHRsZXQgYnVja2V0c19zdW1zID0gc3VtQnVja2V0cyhzb3J0ZWRfYnVja2V0c19tb24pO1xuXHRcdFx0bGV0IHN1bV9lbnRyaWVzID0gbWFrZVN1bUVudHJpZXMoYnVja2V0c19zdW1zLHRoaXMuc2V0dGluZ3MudGFibGVfc3Vtcyk7XG5cdFx0XHQvLyAtLS0tIFN0cmluZyBlcnN0ZWxsZW4gLS0tLVxuXHRcdFx0Ly8gXHUwMERDYmVyc2NocmlmdCBwbHVzIFRhYmVsbGVua29wZlxuXHRcdFx0bmV3X2RvYyArPSBtb24gKyBcIlxcblwiICsgdGFibGVfaGVhZDtcblx0XHRcdC8vIElGIHBsdWdpbi5zZXR0aW5nLmluY2x1ZGVfdHJhbnNhY3Rpb25zOiBaZWlsZW53ZWlzZSBFaW50clx1MDBFNGdlIGhpbnp1Zlx1MDBGQ2dlblxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMpe1xuXHRcdFx0XHRuZXdfZG9jICs9IG1ha2VUYWJsZUZyb21NYXAoYnVja2V0c19saXN0LHN0cmluZ2lmeUFuZFJldmVyc2VUcmFuc2FjdGlvbk1hcChzb3J0ZWRfYnVja2V0c19tb24pKTtcblx0XHRcdFx0bmV3X2RvYyArPSBlbXB0eV9yb3c7XG5cdFx0XHR9XG5cdFx0XHQvLyBzZXR0aW5ncy5UYWJsZV9zdW1zIGhpbnp1Zlx1MDBGQ2dlblxuXHRcdFx0bmV3X2RvYyArPSBtYWtlVGFibGVGcm9tTWFwKGJ1Y2tldHNfbGlzdCxzdW1fZW50cmllcyk7XG5cdFx0XHQvLyBwaWVjaGFydCBoaW56dWZcdTAwRkNnZW5cblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmluY2x1ZGVfcGllY2hhcnQpe1xuXHRcdFx0XHRuZXdfZG9jICs9IG1ha2VQaWVjaGFydEZyb21NYXAodGhpcy5zZXR0aW5ncy5waWVjaGFydF9idWNrZXRzLCBidWNrZXRzX3N1bXMsIHRoaXMuc2V0dGluZ3MuYnVja2V0X25hbWVzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBMZWRnZXIgbW9kaWZpemllcmVuXG5cdFx0dGhpcy5hcHAudmF1bHQubW9kaWZ5KGRvY19sZWRnZXIsIG5ld19kb2MpO1xuXHR9XG59XG5mdW5jdGlvbiBtYWtlTW9udGhzTWFwKGFycl90cmFuc2FjdGlvbnMpe1xuXHRsZXQgbW9udGhzX21hcCA9IG5ldyBNYXA8c3RyaW5nLGFycmF5PigpO1xuXHRsZXQgbW9udGg6c3RyaW5nO1xuXHRmb3IgKGNvbnN0IGxpbmUgb2YgYXJyX3RyYW5zYWN0aW9ucyl7XG5cdFx0aWYgKGxpbmU9PVwiXFxuXCIgfHwgbGluZT09XCJcIil7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0Ly8gRmFsbHMgZXMgZWluZSBcdTAwRENiZXJzY2hyaWZ0IGlzdCwgbmV1ZXMgRWxlbWVudCBpbSBEaWN0IGFubGVnZW4uXG5cdFx0aWYgKGxpbmUuaW5kZXhPZihcIiNcIikgIT0gLTEpe1xuXHRcdFx0bW9udGggPSBsaW5lO1xuXHRcdFx0bGV0IGFycjpzdHJpbmdbXSA9IFtdO1xuXHRcdFx0bW9udGhzX21hcC5zZXQobW9udGgsYXJyKTtcblx0XHR9ZWxzZXsgLy8gQW5zb25zdGVuIGRpZSBaZWlsZW4gc2FtbWVsbi5cblx0XHRcdGxldCBhcnI6c3RyaW5nW10gPSBtb250aHNfbWFwLmdldChtb250aCk7XG5cdFx0XHRhcnIucHVzaChsaW5lKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1vbnRoc19tYXBcbn1cbmZ1bmN0aW9uIG1ha2VUYWJsZUhlYWQoYnVja2V0cyxidWNrZXRfbmFtZXMpe1xubGV0IHRhYmxlX2hlYWQgPSBcInxcIjtcbmxldCB0YWJsZV9oZWFkMj1cInxcIjtcbmZvciAoY29uc3QgYiBvZiBidWNrZXRzKXtcblx0dGFibGVfaGVhZCArPSBidWNrZXRfbmFtZXNbYl0rXCJ8XCI7XG5cdHRhYmxlX2hlYWQyICs9IFwiIC0tLSB8XCI7XG59XG5yZXR1cm4gdGFibGVfaGVhZCArIFwiXFxuXCIgKyB0YWJsZV9oZWFkMiArIFwiXFxuXCI7XG59XG5mdW5jdGlvbiBzb3J0VHJhbnNhY3Rpb25zKG1hcCxhcnIpe1xuXHRmb3IgKGNvbnN0IHQgb2YgYXJyKXtcblx0XHRsZXQgc3BsaXQgPSBtYWtlVHJhbnNhY3Rpb24odCk7XG5cdFx0bWFwLmdldChzcGxpdFswXSkucHVzaChzcGxpdC5zbGljZSgxKSk7XG5cdH1cbn1cbmZ1bmN0aW9uIG1ha2VUcmFuc2FjdGlvbih0KXtcblx0bGV0IHNwbGl0ID0gdC5zcGxpdChcIiBcIik7XG5cdGxldCBkZXNjID0gc3BsaXQuc2xpY2UoMikuam9pbihcIiBcIik7XG5cdHJldHVybiBbc3BsaXRbMF0sc3BsaXRbMV0sZGVzY107XG59XG5mdW5jdGlvbiBzdW1CdWNrZXRzKG1hcCl7XG5cdGxldCBzdW1zID0gbmV3IE1hcDxzdHJpbmcsZmxvYXQ+KCk7XG5cdG1hcC5mb3JFYWNoKCh0cyxiKSA9PiB7XG5cdFx0bGV0IHN1bSA9IDA7XG5cdFx0Zm9yIChjb25zdCB0IG9mIHRzKXtcblx0XHRcdHN1bSArPSBwYXJzZUZsb2F0KHQpO1xuXHRcdH1cblx0XHRzdW1zLnNldChiLHN1bS50b0ZpeGVkKDIpKTtcblx0fSk7XG5cdHJldHVybiBzdW1zO1xufVxuZnVuY3Rpb24gbWFrZVN1bUVudHJpZXMoc3VtcywgdGFibGVfc3Vtcyl7XG5cdGxldCBzdW1fZW50cmllcyA9IG5ldyBNYXA8c3RyaW5nLGFycmF5PigpO1xuXHRPYmplY3QuZW50cmllcyh0YWJsZV9zdW1zKS5mb3JFYWNoKGZ1bmN0aW9uKFtrLHZdKXtcblx0XHRzdW1fZW50cmllcy5zZXQoayxbXSk7XG5cdFx0bGV0IGNvbWJpbmF0aW9ucyA9IHYuc3BsaXQoXCIsXCIpO1xuXHRcdGZvciAodmFyIHMgb2YgY29tYmluYXRpb25zKXtcblx0XHRcdGxldCB2b3J6ZWljaGVuID0gMTtcblx0XHRcdGxldCB0bXAgPSAwO1xuXHRcdFx0bGV0IHN0clZ6ID0gc1swXTtcblx0XHRcdGZvciAoY29uc3QgYyBvZiBzLnNsaWNlKDEpKXtcblx0XHRcdFx0aWYgKGMgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGMgPT0gXCItXCIpe1xuXHRcdFx0XHRcdHZvcnplaWNoZW4gPSAtMTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgKz0gdm9yemVpY2hlbiogcGFyc2VGbG9hdChzdW1zLmdldChjKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHN3aXRjaChzdHJWeil7XG5cdFx0XHRcdGNhc2UgXCIrXCI6XG5cdFx0XHRcdFx0aWYgKHRtcCA8IDApe1xuXHRcdFx0XHRcdFx0c3RyVnogPSBcIlwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIi1cIjpcblx0XHRcdFx0XHRpZiAodG1wIDwwKXtcblx0XHRcdFx0XHRcdHN0clZ6ID0gXCIrXCI7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRzdHJWeiA9IFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRtcCAqPSAtMTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIjBcIjpcblx0XHRcdFx0XHRzdHJWeiA9IFwiXCI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzdW1fZW50cmllcy5nZXQoaykucHVzaChzdHJWeiArIHRtcC50b0ZpeGVkKDIpKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gc3VtX2VudHJpZXM7XG59XG5mdW5jdGlvbiBtYWtlRW1wdHlUYWJsZVJvdyhsZW4pe1xuXHRsZXQgcm93ID0gXCJ8XCI7XG5cdGZvciAobGV0IGk9MDtpPGxlbjtpKysgKXtcblx0XHRyb3cgKz0gXCIgfFwiXG5cdH1cblx0cmV0dXJuIHJvdytcIlxcblwiXG59XG5mdW5jdGlvbiBzdHJpbmdpZnlBbmRSZXZlcnNlVHJhbnNhY3Rpb25NYXAobWFwKXtcblx0bGV0IG5ld19tYXAgPSBuZXcgTWFwPHN0cmluZyxhcnJheT4oKTtcblx0bWFwLmZvckVhY2goKHYsaykgPT4ge1xuXHRcdGxldCBsaXN0ID0gW107XG5cdFx0Zm9yIChjb25zdCBlbGVtZW50IG9mIHYpe1xuXHRcdFx0bGlzdC5wdXNoKGVsZW1lbnQuam9pbihcIiBcIikpO1xuXHRcdH1cblx0XHRuZXdfbWFwLnNldChrLGxpc3QucmV2ZXJzZSgpKTtcblx0fSk7XG5cdHJldHVybiBuZXdfbWFwO1xufVxuZnVuY3Rpb24gbWFrZVRhYmxlRnJvbU1hcChidWNrZXRzLCBtYXApe1xuXHRsZXQgZXhoYXVzdGVkID0gW107XG5cdGxldCB0YWJsZSA9IFwiXCI7XG5cdGxldCByb3cgPSAwO1xuXHRidWNrZXRzLmZvckVhY2goZWxlbWVudCA9PiB7IGV4aGF1c3RlZC5wdXNoKDApO30pO1xuXHR3aGlsZSAoZXhoYXVzdGVkLmluY2x1ZGVzKDApKXtcblx0XHR0YWJsZSArPSBcInxcIjtcblx0XHRmb3IgKGxldCBpPTA7aTxidWNrZXRzLmxlbmd0aDtpKyspe1xuXHRcdFx0aWYgKGV4aGF1c3RlZFtpXSA9PSAwKXtcblx0XHRcdFx0bGV0IG1hcF9lbCA9IG1hcC5nZXQoYnVja2V0c1tpXSk7XG5cdFx0XHRcdGlmIChtYXBfZWxbcm93XSAhPSB1bmRlZmluZWQpe1xuXHRcdFx0XHRcdHRhYmxlICs9IG1hcF9lbFtyb3ddO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChtYXBfZWwubGVuZ3RoIDw9IHJvdysxKXtcblx0XHRcdFx0XHRleGhhdXN0ZWRbaV0gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0YWJsZSArPSBcIiB8XCI7XG5cdFx0fVxuXHRcdHRhYmxlICs9IFwiXFxuXCI7XG5cdFx0cm93Kys7XG5cdH1cblx0cmV0dXJuIHRhYmxlO1xufVxuXG5mdW5jdGlvbiBtYWtlUGllY2hhcnRGcm9tTWFwKGJ1Y2tldHMsIG1hcCwgbmFtZXMpe1xuXHRyZXN1bHQgPSBcIj5bIWluZm9dLSBQaWVjaGFydFxcbj4gYGBgbWVybWFpZFxcbj4gcGllXFxuXCJcblx0Zm9yIChjb25zdCBiIG9mIGJ1Y2tldHMpe1xuXHRcdHJlc3VsdCArPSAnPiBcIicrbmFtZXNbYl0rJ1wiOicrbWFwLmdldChiKStcIlxcblwiO1xuXHR9XG5cdHJlc3VsdCArPSBcIj4gYGBgXFxuXFxuXCI7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGJ1Y2tldHNUb0RpY3QoYnVja2V0c0lucHV0KXtcblx0bGV0IGJ1Y2tldHM6IGFycmF5ID0gYnVja2V0c0lucHV0LnNwbGl0KFwiXFxuXCIpO1xuXHRsZXQgZGljdCA9IHt9O1xuXHRmb3IgKGNvbnN0IGIgb2YgYnVja2V0cyl7XG5cdFx0aWYgKGIgIT0gXCJcIil7XG5cdFx0XHRzcGxpdCA9IGIuc3BsaXQoXCI6IFwiKTtcblx0XHRcdGRpY3Rbc3BsaXRbMF1dID0gc3BsaXRbMV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkaWN0O1xufVxuZnVuY3Rpb24gZGljdFRvQnVja2V0cyhkaWN0KXtcblx0b3V0ID0gXCJcIlxuXHRPYmplY3QuZW50cmllcyhkaWN0KS5mb3JFYWNoKGZ1bmN0aW9uKFtrLHZdKXtcblx0XHRvdXQgKz0gayArIFwiOiBcIiArIHYgK1wiXFxuXCI7XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTID0ge1xuXHR0cmFuc2FjdGlvbl9maWxlOiBcIl90cmFuc2FjdGlvbnMubWRcIixcblx0bGVkZ2VyX2ZpbGU6IFwiX2xlZGdlci5tZFwiLFxuXHRidWNrZXRfbmFtZXM6IHsnZyc6XCJHZWxkXCIsJ2knOlwiSW5jb21lXCIsJ3cnOlwiV2llZGVyaG9sdW5nXCIsJ2InOlwiQmVzb3JndW5nXCIsJ3MnOiBcIlNvbnN0aWdlc1wiLCdmJzpcIkZyZWl6ZWl0XCIsJ2UnOlwiRWlua2F1ZmVuXCJ9LFxuXHR0YWJsZV9zdW1zOiB7J2UnOlwiZVwiLCdmJzpcImZcIiwnYic6XCJiLGUrZitiXCIsJ3MnOlwicyxlK2YrYitzXCIsJ3cnOlwidyxlK2YrYitzK3dcIiwnaSc6XCJpLGktZS1mLWItcy13LGcraS1lLWYtYi1zLXdcIn0sXG5cdGluY2x1ZGVfdHJhbnNhY3Rpb25zOiB0cnVlLFxuXHRpbmNsdWRlX3BpZWNoYXJ0OiBmYWxzZSxcblx0cGllY2hhcnRfYnVja2V0czogW1wiZVwiLFwiZlwiLFwiYlwiLFwic1wiLFwid1wiXVxufVxuXG5jbGFzcyBDcm9uaWV2Qm9va2tlZXBpbmdTZXR0aW5nc1RhYiBleHRlbmRzIG9ic2lkaWFuLlBsdWdpblNldHRpbmdUYWIge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBsdWdpbikge1xuICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblx0ZGlzcGxheSgpIHtcbiAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0Nyb25pZXYgQm9va2tlZXBpbmcgLSBTZXR0aW5ncycgfSk7XG4vLyBUT0RPOiBCZW51dHplIEZpbGVTdWdnZXN0IChUZW1wbGF0ZXIpXG5cdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIlRyYW5zYWN0aW9ucyBGaWxlXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgdGhlIHBhdGggdG8gdGhlIGZpbGUgeW91IHdhbnQgdG8gYWRkIHRoZSB0cmFuc2FjdGlvbnMgdG9cIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiX3RyYW5zYWN0aW9ucy5tZFwiKVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdfdHJhbnNhY3Rpb25zLm1kJztcblx0XHRcdH1cblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUgPSB2YWx1ZTtcblx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG4vLyBUT0RPOiBCZW51dHplIEZpbGVTdWdnZXN0IChUZW1wbGF0ZXIpXG5cdCAgbmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkxlZGdlciBGaWxlXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgdGhlIHBhdGggdG8gdGhlIGZpbGUgeW91IHdhbnQgdGhlIGxlZGdlciB0byBiZSBhZGRlZCB0b1wiKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJfbGVkZ2VyLm1kXCIpXG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGVkZ2VyX2ZpbGUpXG5cdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcblx0XHRcdFx0XHR2YWx1ZSA9ICdfbGVkZ2VyLm1kJztcblx0XHRcdH1cblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRyYW5zYWN0aW9uX2ZpbGUgPSB2YWx1ZTtcblx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdCAgbmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkJ1Y2tldHNcIilcblx0XHRcdC5zZXREZXNjKFwiVHlwZSB0aGUgY2xhc3NpZmllciBhbmQgTmFtZSBvZiB0aGUgYnVja2V0cyB5b3Ugd2FudCB0byB1c2UsIG9uZSBidWNrZXQgcGVyIGxpbmVcIilcblx0XHRcdC5zZXRDbGFzcyhcImJvb2trZWVwaW5nLXRhbGwtZmllbGRcIilcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiaTogSW5jb21lXCIpXG5cdFx0XHQuc2V0VmFsdWUoZGljdFRvQnVja2V0cyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5idWNrZXRfbmFtZXMpKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5idWNrZXRfbmFtZXMgPSBidWNrZXRzVG9EaWN0KHZhbHVlKTtcblx0XHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0fSkpKTtcblx0ICBuZXcgb2JzaWRpYW4uU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiU3VtcyBTaG93biBpbiBUYWJsZVwiKVxuXHRcdFx0LnNldERlc2MoXCJJbiB0aGUgb3JkZXIgdGhhdCB0aGUgYnVja2V0cyBzaG91bGQgYXBwZWFyIGluIHRoZSB0YWJsZSBhZGQgKG9uZSByb3cgZm9yIGVhY2ggYnVja2V0KSB3aGljaCBzdW0gY29tYmluYXRpb25zIHNob3VsZCBiZSBzaG93biBhdCB0aGUgYm90dG9tIG9mIHRoZSB0YWJsZS4gT25seSAnKycgYW5kICctJyBhcmUgc3VwcG9ydGVkLlxcbkVhY2ggY29tYmluYXRpb24gc2hvdWxkIHN0YXJ0IHdpdGggb25lIG9mIHRoZSBmb2xsb3dpbmcgU3ltYm9sczogJysnIHRvIHNob3cgdGhlIHNpZ24gb2YgdGhlIHN1bSwgJy0nIHRvIHNob3cgdGhlIG9wcG9zaXRlIG9mIHRoZSBzaWduLCBhbmQgJzAnIHRvIG5vdCBzaG93IHBvc2l0aXZlIHNpZ25zLlwiKVxuXHRcdFx0LnNldENsYXNzKFwiYm9va2tlZXBpbmctdGFsbC1maWVsZFwiKVxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XG5cdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ2I6IGIsYitlLGUrZitiJylcblx0XHRcdC5zZXRWYWx1ZShkaWN0VG9CdWNrZXRzKHRoaXMucGx1Z2luLnNldHRpbmdzLnRhYmxlX3N1bXMpKVxuXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJsZV9zdW1zID0gYnVja2V0c1RvRGljdCh2YWx1ZSk7XG5cdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdH0pKSk7XG5cdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHRcdC5zZXROYW1lKFwiRGlzcGxheSBUcmFuc2FjdGlvbnMgaW4gVGFibGVcIilcblx0XHRcdFx0LnNldERlc2MoXCJBZGQgYSBsaXN0IG9mIHRoZSB0cmFuc2FjdGlvbnMgdG8gdGhlIHRhYmxlLlwiKVxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV90cmFuc2FjdGlvbnMpXG5cdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3RyYW5zYWN0aW9ucyA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3RyYW5zYWN0aW9ucztcblx0XHRcdFx0XHR5aWVsZCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR9KSkpO1xuXHRcdG5ldyBvYnNpZGlhbi5TZXR0aW5nKGNvbnRhaW5lckVsKSAvL2luY2x1ZGVfcGllY2hhcnRcblx0XHRcdFx0LnNldE5hbWUoXCJEaXNwbGF5IHBpZWNoYXJ0IGZvciBlYWNoIG1vbnRoXCIpXG5cdFx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3BpZWNoYXJ0KVxuXHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZV9waWVjaGFydCA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlX3BpZWNoYXJ0O1xuXHRcdFx0XHRcdHlpZWxkIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdH0pKSk7XG5cdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVfcGllY2hhcnQpe1xuXHRcdFx0bmV3IG9ic2lkaWFuLlNldHRpbmcoY29udGFpbmVyRWwpIC8vIHBpZWNoYXJ0X2J1Y2tldHNcblx0XHRcdFx0LnNldE5hbWUoXCJCdWNrZXRzIHRvIGRpc3BsYXkgaW4gcGllY2hhcnRcIilcblx0XHRcdFx0LnNldERlc2MoXCJTZXBhcmF0ZWQgYnkgY29tbWEuXCIpXG5cdFx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGllY2hhcnRfYnVja2V0cy5qb2luKFwiLFwiKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBpZWNoYXJ0X2J1Y2tldHMgPSB2YWx1ZS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0eWllbGQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSkpO1xuXHRcdH1cblx0fVxu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LEVBQ2hYLFNBQVMsd0JBQXdCLEVBQ2pDLFlBQVksQ0FBQyxTQUFTLEtBQ3RCLGVBQWUsZ0JBQWdCLEVBQy9CLFNBQVMsY0FBYyxLQUFLLE9BQU8sU0FBUyxVQUFVLENBQUMsRUFDdkQsU0FBUyxDQUFDLFVBQVUsVUFBVSxNQUFNLFFBQVEsUUFBUSxhQUFhO0FBQ2pFLFdBQUssT0FBTyxTQUFTLGFBQWEsY0FBYyxLQUFLO0FBQ3JELFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNqQyxDQUFDLENBQUMsQ0FBQztBQUNILFFBQUksU0FBUyxRQUFRLFdBQVcsRUFDN0IsUUFBUSwrQkFBK0IsRUFDdkMsUUFBUSw4Q0FBOEMsRUFDdEQsVUFBVSxZQUFVLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxvQkFBb0IsRUFDN0UsU0FBUyxDQUFDLFVBQVUsVUFBVSxNQUFNLFFBQVEsUUFBUSxhQUFhO0FBQ2pFLFdBQUssT0FBTyxTQUFTLHVCQUF1QixDQUFDLEtBQUssT0FBTyxTQUFTO0FBQ2xFLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNsQyxDQUFDLENBQUMsQ0FBQztBQUNILFFBQUksU0FBUyxRQUFRLFdBQVcsRUFDN0IsUUFBUSxpQ0FBaUMsRUFDekMsVUFBVSxZQUFVLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxnQkFBZ0IsRUFDekUsU0FBUyxDQUFDLFVBQVUsVUFBVSxNQUFNLFFBQVEsUUFBUSxhQUFhO0FBQ2pFLFdBQUssT0FBTyxTQUFTLG1CQUFtQixDQUFDLEtBQUssT0FBTyxTQUFTO0FBQzlELFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsV0FBSyxRQUFRO0FBQUEsSUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFDSCxRQUFJLEtBQUssT0FBTyxTQUFTLGtCQUFpQjtBQUN6QyxVQUFJLFNBQVMsUUFBUSxXQUFXLEVBQzlCLFFBQVEsZ0NBQWdDLEVBQ3hDLFFBQVEscUJBQXFCLEVBQzdCLFlBQVksQ0FBQyxTQUFTLEtBQ3RCLFNBQVMsS0FBSyxPQUFPLFNBQVMsaUJBQWlCLEtBQUssR0FBRyxDQUFDLEVBQ3hELFNBQVMsQ0FBQyxVQUFVLFVBQVUsTUFBTSxRQUFRLFFBQVEsYUFBYTtBQUNqRSxhQUFLLE9BQU8sU0FBUyxtQkFBbUIsTUFBTSxNQUFNLEdBQUc7QUFDdkQsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUMsQ0FBQyxDQUFDO0FBQUEsSUFDSjtBQUFBLEVBQ0Q7QUFDRDtBQUVBLE9BQU8sVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K
